{"version":3,"sources":["containers/MainPage/constants.js","containers/MainPage/reducer.js","HOC/checkStore.js","utils/history.js","containers/App/reducer.js","containers/App/constants.js","reducers.js","HOC/reducerInjectors.js","HOC/useInjectReducer.js","components/hand/hand.js","components/board/board.js","components/MainContainer/index.js","components/BoardLegend/BoardLegend.js","containers/MainPage/selectors.js","containers/MainPage/index.js","containers/MainPage/actions.js","HOC/API/useRequest1.js","reducers/actions.js","reducers/actionsHandRanges.js","containers/Auth/UserLogin.js","containers/Auth/UserRegister.js","HOC/useStripe/StripeHookProvider.js","containers/MyForm/MyForm.js","containers/App/App.js","serviceWorker.js","localStorage.js","index.js","configureStore.js"],"names":["SET_HAND_RANGE","GET_HAND_RANGE","initialState","globalHands","mode","street","streetAction","ranges","Preflop","disabled","Raise4betCall","color","active","prHandString","colorCard","Raise4betFold","RaiseCall","RaiseFold","Flop","valuebet","bluff","checkCall","checkFold","Turn","River","mainPageReducer","state","action","produce","draft","type","data","name","value","console","log","push","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","history","createBrowserHistory","loading","error","menus","categories","regions","appReducer","slug","menu","createReducer","rootReducer","combineReducers","global","globalReducer","router","connectRouter","injectReducerFactory","isValid","key","reducer","isString","isEmpty","Reflect","has","getInjectors","injectReducer","Hand","onHandClick","cardOne","cardTwo","suit","classColor","useInjectReducer","Grid","Column","Button","onClick","className","orderedCardInitial","Board","orderedCard","Row","columns","map","indexCardOne","indexCardTwo","displaySuit","card1","card2","displayCard","StyledContainer","styled","Container","MainContainer","children","Table","Header","selectGlobal","StyledButton","props","withConnect","connect","getGlobalHands","createSelector","globalState","compose","memo","context","React","useContext","ReactReduxContext","useEffect","useDispatch","handleStreet","e","setHandRangeSelect","Col","setHandRange","span","Group","size","Or","useRequest1","requestURL","getOrPost","useState","isFetching","dataState","setDataState","endpointUrl","a","axios","post","params","response","get","fetchDataFromApi","setUserAction","userObj","payload","userCredentials","config","method","headers","body","JSON","stringify","fetch","BASE_URL","then","r","json","user","id","localStorage","setItem","token","clear","addHRAction","hrObj","newHRToDB","hrUserID","getHRAction","newHRFToDB","newHRGToDB","createHRF","hrFolderName","folderName","editHRF","HAND_RANGE_FOLDER_URL","withRouter","reducers","fetchBooks","hrActions","getAll","hand_ranges","postQuery","UseRequest1API","username","password","loginForm","setLoginForm","user_id","useSelector","userRanges","handRangesAvailable","folderNames","handleSubmit","preventDefault","userActions","handleChange","target","Form","onSubmit","Field","placeholder","onChange","Checkbox","label","UserRegister","setPostQuery","loginUserHandler","newData","email","password_confirmation","bind","Context","createContext","injectStripe","stripe","Provider","amountEl","useRef","useRequest1API","PAYMENT_INTENT_CLIENT_SECRET","createToken","amount","current","tokobj","tok","receipt_email","status","ref","App","Menu","inverted","Item","to","path","exact","component","UserLogin","MainPage","Boolean","window","location","hostname","match","loadState","serializedState","getItem","parse","composeEnhancers","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","persistedState","createStore","run","configureStore","document","getElementById","throttle","saveState","order","ReactDOM","render","theme","main","data-test","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.420b8c30.chunk.js","sourcesContent":["/*\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const SET_HAND_RANGE = \"handrangeAPI/MainPage/SET_HAND_RANGE\";\nexport const SET_HAND_RANGE_SELECT = \"handrangeAPI/MainPage/SET_HAND_RANGE\";\nexport const GET_HAND_RANGE = \"handrangeAPI/MainPage/GET_HAND_RANGE\";\nexport const SET_HAND_RANGE_FOLDER =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_FOLDER\";\nexport const SET_HAND_RANGE_GROUP =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_GROUP\";\nexport const EDIT_HAND_RANGE_FOLDER =\n  \"handrangeAPI/MainPage/EDIT_HAND_RANGE_FOLDER\";\nexport const GET_HAND_RANGE_FOLDER =\n  \"handrangeAPI/MainPage/GET_HAND_RANGE_FOLDER\";\nexport const CREATE_HAND_RANGE_FOLDER =\n  \"handrangeAPI/MainPage/CREATE_HAND_RANGE_FOLDER\";\nexport const SET_CLASS_COLOR = \"handrangeAPI/MainPage/SET_CLASS_COLOR\";\n","import produce from \"immer\";\n\nimport {\n  GET_HAND_RANGE,\n  SET_HAND_RANGE,\n  SET_HAND_RANGE_FOLDER,\n  SET_HAND_RANGE_GROUP,\n  GET_HAND_RANGE_FOLDER,\n  CREATE_HAND_RANGE_FOLDER,\n  EDIT_HAND_RANGE_FOLDER,\n  SET_HAND_RANGE_SELECT,\n  SET_CLASS_COLOR\n} from \"./constants.js\";\n\nexport const initialState = {\n  globalHands: {\n    mode: {\n      street: \"\",\n      streetAction: \"\"\n    },\n    ranges: {\n      Preflop: {\n        disabled: false,\n        Raise4betCall: {\n          color: \"green\",\n          active: \"red\",\n          prHandString: \"\",\n          colorCard: \"green card-button\"\n        },\n        Raise4betFold: {\n          color: \"blue\",\n          active: false,\n          prHandString: \"\",\n          colorCard: \"blue card-button\"\n        },\n        RaiseCall: {\n          color: \"purple\",\n          active: false,\n          prHandString: \"\",\n          colorCard: \"purple card-button\"\n        },\n        RaiseFold: {\n          color: \"red\",\n          active: false,\n          prHandString: \"\",\n          colorCard: \"red card-button\"\n        }\n      },\n      Flop: {\n        disabled: true,\n        valuebet: {\n          color: \"green\",\n          prHandString: \"\",\n          colorCard: \"green card-button\"\n        },\n        bluff: {\n          color: \"blue\",\n          prHandString: \"\",\n          colorCard: \"blue card-button\"\n        },\n        checkCall: {\n          color: \"purple\",\n          prHandString: \"\",\n          colorCard: \"purple card-button\"\n        },\n        checkFold: {\n          color: \"red\",\n          prHandString: \"\",\n          colorCard: \"red card-button\"\n        }\n      },\n      Turn: {\n        disabled: true,\n        valuebet: {\n          color: \"green\",\n          prHandString: \"\",\n          colorCard: \"green card-button\"\n        },\n        bluff: {\n          color: \"blue\",\n          prHandString: \"\",\n          colorCard: \"blue card-button\"\n        },\n        checkCall: {\n          color: \"purple\",\n          prHandString: \"\",\n          colorCard: \"purple card-button\"\n        },\n        checkFold: {\n          color: \"red\",\n          prHandString: \"\",\n          colorCard: \"red card-button\"\n        }\n      },\n      River: {\n        disabled: true,\n        valuebet: {\n          color: \"green\",\n          prHandString: \"\",\n          colorCard: \"green card-button\"\n        },\n        bluff: {\n          color: \"blue\",\n          prHandString: \"\",\n          colorCard: \"blue card-button\"\n        },\n        checkCall: {\n          color: \"purple\",\n          prHandString: \"\",\n          colorCard: \"purple card-button\"\n        },\n        checkFold: {\n          color: \"red\",\n          prHandString: \"\",\n          colorCard: \"red card-button\"\n        }\n      }\n    }\n  }\n};\n\nconst mainPageReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case SET_HAND_RANGE_SELECT:\n        draft.globalHands.mode.street = action.data.name;\n        draft.globalHands.mode.streetAction = action.data.value;\n        break;\n      case GET_HAND_RANGE:\n        draft.mode[[action.data.name]] = action.data.value; //sets the range street and values.\n        break;\n      case SET_HAND_RANGE:\n        console.log(action);\n        draft.mode[[draft.globalHands.mode.street]][\n          [draft.globalHands.mode.streetAction]\n        ].push(action.data);\n        break;\n      case SET_HAND_RANGE_FOLDER:\n        break;\n      case SET_HAND_RANGE_GROUP:\n        break;\n      case GET_HAND_RANGE_FOLDER:\n        break;\n      case CREATE_HAND_RANGE_FOLDER:\n        break;\n      case EDIT_HAND_RANGE_FOLDER:\n        break;\n\n      default:\n        break;\n    }\n  });\n\nexport default mainPageReducer;\n","import { conformsTo, isFunction, isObject } from \"lodash\";\nimport invariant from \"invariant\";\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  const shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(\n    conformsTo(store, shape),\n    \"(app/utils...) injectors: Expected a valid redux store\"\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","/*\n * AppReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from \"immer\";\nimport {\n  LOAD_MENU,\n  LOAD_MENU_SUCCESS,\n  LOAD_MENU_ERROR,\n  LOAD_CATEGORIES,\n  LOAD_CATEGORIES_SUCCESS,\n  LOAD_CATEGORIES_ERROR,\n  LOAD_REGIONS_SUCCESS,\n  LOAD_REGIONS,\n  LOAD_REGIONS_ERROR\n} from \"./constants\";\n\n// The initial state of the App\nexport const initialState = {\n  loading: true,\n  error: false,\n  menus: {},\n  categories: false,\n  regions: { loading: true }\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst appReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case LOAD_MENU:\n        draft.menus = { [action.slug]: {} };\n        break;\n\n      case LOAD_MENU_SUCCESS:\n        draft.menus[action.menu.slug] = action.menu;\n        break;\n\n      case LOAD_MENU_ERROR:\n        draft.error = action.error;\n        break;\n\n      case LOAD_CATEGORIES:\n        draft.categories = false;\n        break;\n\n      case LOAD_CATEGORIES_SUCCESS:\n        draft.categories = action.categories;\n        break;\n\n      case LOAD_CATEGORIES_ERROR:\n        draft.error = action.error;\n        break;\n\n      case LOAD_REGIONS:\n        draft.regions.loading = true;\n        draft.regions.error = false;\n        draft.regions.data = false;\n        break;\n\n      case LOAD_REGIONS_SUCCESS:\n        draft.regions.data = action.regions;\n        draft.regions.loading = false;\n        break;\n\n      case LOAD_REGIONS_ERROR:\n        draft.regions.error = action.error;\n        draft.regions.loading = false;\n        break;\n    }\n  });\n\nexport default appReducer;\n","/*\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_MENU = \"airsells/App/LOAD_MENU\";\nexport const LOAD_MENU_SUCCESS = \"airsells/App/LOAD_MENU_SUCCESS\";\nexport const LOAD_MENU_ERROR = \"airsells/App/LOAD_MENU_ERROR\";\n\nexport const LOAD_CATEGORIES = \"airsells/App/LOAD_CATEGORIES\";\nexport const LOAD_CATEGORIES_SUCCESS = \"airsells/App/LOAD_CATEGORIES_SUCCESS\";\nexport const LOAD_CATEGORIES_ERROR = \"airsells/App/LOAD_CATEGORIES_ERROR\";\n\nexport const LOAD_REGIONS = \"airsells/App/LOAD_REGIONS\";\nexport const LOAD_REGIONS_SUCCESS = \"airsells/App/LOAD_REGIONS_SUCCESS\";\nexport const LOAD_REGIONS_ERROR = \"airsells/App/LOAD_REGIONS_ERROR\";\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport history from \"./utils/history\";\nimport globalReducer from \"./containers/App/reducer\";\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    router: connectRouter(history),\n    ...injectedReducers\n  });\n\n  return rootReducer;\n}\n","import invariant from \"invariant\";\nimport { isEmpty, isFunction, isString } from \"lodash\";\n\nimport checkStore from \"./checkStore\";\nimport createReducer from \"../reducers\";\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\"\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}\n","import React from \"react\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { ReactReduxContext } from \"react-redux\";\n\nimport getInjectors from \"./reducerInjectors\";\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      \"Component\"})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport reducer from \"../../containers/MainPage/reducer.js\";\nimport useInjectReducer from \"../../HOC/useInjectReducer.js\";\n\nconst key = 'globalHands';\nconst Hand = ({ onHandClick, cardOne, cardTwo, suit, classColor = false }) => {\n\n  useInjectReducer({ key, reducer });\n\n  const classColors = () => {\n    if (classColor) return classColor;\n    else return \"white card-button\";\n  };\n\n  return (\n    <Grid.Column>\n      <Button\n        onClick={onHandClick}\n        name={cardOne + cardTwo + suit}\n        className={classColors()}\n      >\n        {cardOne}\n        {cardTwo}\n        {suit}\n      </Button>\n    </Grid.Column>\n  );\n};\n\nexport default Hand;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport Hand from \"../hand/hand\";\n\nconst orderedCardInitial = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"T\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\"\n];\nconst Board = ({\n  orderedCard = orderedCardInitial,\n  onHandClick,\n  classColor\n}) => {\n  const displayCard = (indexCardOne, indexCardTwo, cardOne, cardTwo) => {\n    let displaySuit, card1, card2;\n\n    if (indexCardOne < indexCardTwo) {\n      displaySuit = \"s\";\n      card1 = cardOne;\n      card2 = cardTwo;\n    } else if (indexCardOne === indexCardTwo) {\n      displaySuit = \"\";\n      card1 = cardOne;\n      card2 = cardTwo;\n    } else {\n      displaySuit = \"o\";\n      card2 = cardOne;\n      card1 = cardTwo;\n    }\n\n    return (\n      <Hand\n        key={cardOne + cardTwo}\n        cardOne={card1}\n        cardTwo={card2}\n        suit={displaySuit}\n        onHandClick={onHandClick}\n        classColor={classColor}\n      ></Hand>\n    );\n  };\n\n  return (\n    <Grid>\n      <Grid.Row className=\"card-grid\" columns={13}>\n        {orderedCard.map((cardOne, indexCardOne) =>\n          orderedCard.map((cardTwo, indexCardTwo) =>\n            displayCard(indexCardOne, indexCardTwo, cardOne, cardTwo)\n          )\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Container from 'react-bootstrap/Container'\n\nconst StyledContainer = styled(Container)`\n  margin-top: 30px;\n  margin-bottom: 50px;\n`;\n\nconst MainContainer = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n\nexport default MainContainer;","import React from 'react';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { Header, Table } from 'semantic-ui-react';\n\n\nconst StyledContainer = styled(Container)`\n    font-size: 1rem;\n`;\n\nconst StyledRedRow = styled(Table.Row)`\n    color: white;\n    background-color: red;\n`;\n\nconst StyledVioletRow = styled(Table.Row)`\n    color: white;\n    background-color: purple;\n`;\n\nconst StyledBlueRow = styled(Table.Row)`\n    color: white;\n    background-color: blue;\n`;\n\nconst StyledGreenRow = styled(Table.Row)`\n    color: white;\n    background-color: green;\n`;\n\nconst StyledInvertedRow = styled(Table.Header)`\n    color: white;\n    background-color: white;\n    color: black;\n`;\n\nconst BoardLegend = (props) => {\n    return (\n        <StyledContainer>\n            <Table>\n                <StyledInvertedRow>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Range # Combos</Table.HeaderCell>\n                        <Table.HeaderCell>% of Range</Table.HeaderCell>\n                        <Table.HeaderCell>% of Hands</Table.HeaderCell>\n                    </Table.Row>\n                </StyledInvertedRow>\n                <Table.Body>\n                    <StyledRedRow>\n                        <Table.Cell>Raise/4bet/Call</Table.Cell>\n                        <Table.Cell>{props.range0Combos}</Table.Cell>\n                        <Table.Cell>{props.range0Percent}</Table.Cell>\n                        <Table.Cell>{props.range0PercentAll}</Table.Cell>\n                    </StyledRedRow>\n                    <StyledVioletRow>\n                        <Table.Cell>Raise/4bet/Fold</Table.Cell>\n                        <Table.Cell>{props.range1Combos}</Table.Cell>\n                        <Table.Cell>{props.range1Percent}</Table.Cell>\n                        <Table.Cell>{props.range1PercentAll}</Table.Cell>\n                    </StyledVioletRow>\n                    <StyledBlueRow>\n                        <Table.Cell>Raise/Call</Table.Cell>\n                        <Table.Cell>{props.range2Combos}</Table.Cell>\n                        <Table.Cell>{props.range2Percent}</Table.Cell>\n                        <Table.Cell>{props.range2PercentAll}</Table.Cell>\n                    </StyledBlueRow>\n                    <StyledGreenRow>\n                        <Table.Cell>Raise/Fold</Table.Cell>\n                        <Table.Cell>{props.range3Combos}</Table.Cell>\n                        <Table.Cell>{props.range3Percent}</Table.Cell>\n                        <Table.Cell>{props.range3PercentAll}</Table.Cell>\n                    </StyledGreenRow>\n                </Table.Body>\n            </Table>\n        </StyledContainer>\n    )\n}\n\nexport default BoardLegend;","/**\n * The home state selectors\n */\n\nimport { createSelector } from \"reselect\";\n\nimport { initialState } from \"./reducer.js\";\n\nconst selectGlobal = state => state.globalHands | initialState.globalHands; //needs to be changed to no dot\n\nconst makeSelectGlobal = () =>\n  createSelector(selectGlobal, globalState => globalState);\n\nexport { makeSelectGlobal };\n","import React, { useState, useEffect, memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport MainContainer from \"../../components/MainContainer/index\";\nimport Board from \"../../components/board/board\";\nimport Range from \"../Range/index\";\nimport { Button, Select } from \"semantic-ui-react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport prange from \"prange\";\nimport { Row, Col } from \"react-bootstrap\";\nimport BoardLegend from \"../../components/BoardLegend/BoardLegend\";\nimport Hand from \"../../components/hand/hand.js\";\nimport { makeSelectToken, makeSelectUser } from \"./../Auth/selectors\";\nimport {\n  makeSelectHandRangeGroup,\n  makeSelectHandRangeFolder,\n  makeSelectGlobal\n} from \"./selectors.js\";\nimport { getHandRange, setHandRangeSelect, setHandRange } from \"./actions.js\";\nimport reducer from \"./reducer.js\";\nimport { useInjectReducer } from \"../../HOC/useInjectReducer.js\";\n\nimport styled from \"styled-components\";\n\nconst StyledButton = styled(Button)`\n  &&& {\n    background-color: ${props => (props.active ? \"white !important\" : \"none\")};\n    color: ${props => (props.active ? \"black !important\" : \"black\")};\n    width: 150px;\n  }\n`;\n\nconst key = \"global\";\n\nconst MainPage = ({ globalHands }) => {\n  useInjectReducer({ key, reducer });\n\n  const dispatch = useDispatch();\n\n  const handleStreet = (e, data) => {\n    console.log(data);\n    dispatch(setHandRangeSelect({ name: data.name, value: data.value }));\n  };\n\n  console.log(globalHands);\n  const handleClassColor = (cardOne, cardTwo, suit) => {\n    if (globalHands && globalHands.mode.street) {\n      return globalHands.ranges[[globalHands.mode.street]][\n        [globalHands.mode.streetAction]\n      ].colorCard;\n    } else {\n      return \"white card-button\";\n    }\n  };\n\n  const handClickHandler = (e, data) => {\n    console.log(e);\n    console.log(data);\n    dispatch(setHandRange({ data: data.name }));\n  };\n  const orderedCard = [\n    \"A\",\n    \"K\",\n    \"Q\",\n    \"J\",\n    \"T\",\n    \"9\",\n    \"8\",\n    \"7\",\n    \"6\",\n    \"5\",\n    \"4\",\n    \"3\",\n    \"2\"\n  ];\n  return (\n    <>\n      <MainContainer>\n        <Row>\n          <Col>\n            <Board\n              onHandClick={handClickHandler}\n              classColor={handleClassColor()}>\n              {orderedCard}\n            </Board>\n          </Col>\n          {/* <Col><BoardLegend range0Combos={raise4BetCallCombos} range1Combos={raise4BetFoldCombos} range2Combos={raiseCallCombos} \n                                  range3Combos={raiseFoldCombos} range0Percent={raise4BetCallPercent}\n                                  range1Percent={raise4BetFoldPercent} range2Percent={raiseCallPercent}\n                                  range3Percent={raiseFoldPercent} range0PercentAll={raise4BetCallPercentAll}\n                                  range1PercentAll={raise4BetFoldPercentAll} range2PercentAll={raiseCallPercentAll}\n                                  range3PercentAll={raiseFoldPercentAll}></BoardLegend></Col> */}\n        </Row>\n      </MainContainer>\n      <Row span={7}>\n        <Button.Group size=\"large\">\n          <Col>\n            <StyledButton>Preflop</StyledButton>\n          </Col>\n          <Col>\n            <StyledButton.Or />\n          </Col>\n          <Col>\n            <StyledButton>Flop</StyledButton>\n          </Col>\n          <Col>\n            <StyledButton.Or />\n          </Col>\n          <Col>\n            <StyledButton> Turn</StyledButton>\n          </Col>\n          <Col>\n            <StyledButton.Or />\n          </Col>\n          <Col>\n            <StyledButton>River</StyledButton>\n          </Col>\n        </Button.Group>\n      </Row>\n\n      <Row>\n        <Col>\n          <StyledButton\n            onClick={handleStreet}\n            name=\"preflopRange\"\n            value=\"Raise4betCall\"\n          >\n            Raise/4bet/Call\n          </StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Valuebet</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Valuebet</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Valuebet</StyledButton>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <StyledButton\n            onClick={handleStreet}\n            name=\"preflopRange\"\n            value=\"Raise4betFold\"\n          >\n            Raise/4bet/fold\n          </StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>bluff</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>bluff</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>bluff</StyledButton>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <StyledButton\n            onClick={handleStreet}\n            name=\"preflopRange\"\n            value=\"RaiseCall\"\n          >\n            Raise/Call\n          </StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check/Call</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check/Call</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check Turn Call</StyledButton>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <StyledButton\n            onClick={handleStreet}\n            name=\"preflopRange\"\n            value=\"RaiseFold\"\n          >\n            Raise/Fold\n          </StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check/Fold</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check/Fold</StyledButton>\n        </Col>\n        <Col></Col>\n        <Col>\n          <StyledButton>Check Turn Fold</StyledButton>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst makeMapStateToProps = () => {\n  const getGlobalHands = makeSelectGlobal();\n\n  const mapStateToProps = state => {\n    return {\n      globalHands: getGlobalHands(state)\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst withConnect = connect(makeMapStateToProps, null);\n\nexport default compose(withConnect, memo)(MainPage);\n","import {\n  SET_HAND_RANGE,\n  GET_HAND_RANGE,\n  SET_HAND_RANGE_FOLDER,\n  CREATE_HAND_RANGE_FOLDER,\n  SET_HAND_RANGE_GROUP,\n  EDIT_HAND_RANGE_FOLDER,\n  SET_HAND_RANGE_SELECT\n} from \"./constants\";\n\nexport function setHandRangeSelect(data) {\n  return {\n    type: SET_HAND_RANGE_SELECT,\n    data\n  };\n}\n\nexport function setHandRange(data) {\n  return {\n    type: SET_HAND_RANGE,\n    data\n  };\n}\n\nexport function getHandRange(data) {\n  return {\n    type: GET_HAND_RANGE,\n    data\n  };\n}\n\nexport function setHandRangeFolder(hrfObj) {\n  return {\n    type: SET_HAND_RANGE_FOLDER,\n    payload: hrfObj\n  };\n}\n\nexport function createHandRangeFolder(hrfObj) {\n  return {\n    type: CREATE_HAND_RANGE_FOLDER,\n    hrfObj\n  };\n}\nexport function editHandRangeFolder(hrfObj) {\n  return {\n    type: EDIT_HAND_RANGE_FOLDER,\n    hrfObj\n  };\n}\nexport function setHandRangeGroup(hrgObj) {\n  return {\n    type: SET_HAND_RANGE_GROUP,\n    hrgObj\n  };\n}\n\n// API CONSTANTS\n\nconst BASE_URL = \"http://localhost:3001\";\nconst HAND_RANGE_USER_URL = BASE_URL + \"/hand_ranges/show_user_id/\";\nconst HAND_RANGE_FOLDER_URL = BASE_URL + \"/hand_range_folders/\";\nconst HAND_RANGE_GROUP_URL = BASE_URL + \"/hand_range_groups/\";\n\n// Redux Actions\n\nconst addHRAction = hrObj => ({\n  type: \"SET_HAND_RANGE\",\n  payload: hrObj\n});\nconst getHRAction = () => ({\n  type: \"GET_HAND_RANGES\"\n});\n\nconst addHRFAction = hrfObj => ({\n  type: \"SET_HAND_RANGE_FOLDER\",\n  payload: hrfObj\n});\nconst createHRFAction = hrfObj => ({\n  type: \"CREATE_HAND_RANGE_FOLDER\",\n  payload: hrfObj\n});\nconst addHRGAction = hrfObj => ({\n  type: \"SET_HAND_RANGE_GROUP\",\n  payload: hrfObj\n});\n\nconst editHRFAction = hrfObj => ({\n  type: \"EDIT_HAND_RANGE_FOLDER\",\n  payload: hrfObj\n});\n\nconst editHRF = hrFolderName => dispatch => {\n  const config = {\n    method: \"PATCH\",\n    folderName: hrFolderName,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      hand_range_folders: {\n        FolderName: hrFolderName,\n        user_id: 1,\n        id: 1\n      }\n    })\n  };\n  fetch(HAND_RANGE_FOLDER_URL + \"1\", config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data);\n      dispatch(editHRFAction(data));\n    });\n};\n\nconst createHRF = hrFolderName => dispatch => {\n  const config = {\n    method: \"POST\",\n    folderName: hrFolderName,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      FolderName: hrFolderName,\n      user_id: 1\n    })\n  };\n  fetch(HAND_RANGE_FOLDER_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data);\n      dispatch(createHRFAction(data));\n    });\n};\n\nconst newHRFToDB = hrUserID => dispatch => {\n  const config = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  console.log(hrUserID);\n  fetch(HAND_RANGE_FOLDER_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data);\n      dispatch(addHRFAction(data));\n    });\n};\n\nconst newHRGToDB = hrUserID => dispatch => {\n  const config = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(HAND_RANGE_GROUP_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data);\n      dispatch(addHRGAction(data));\n    });\n};\n\nconst newHRToDB = hrUserID => dispatch => {\n  const config = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  console.log(hrUserID);\n  fetch(HAND_RANGE_USER_URL + hrUserID, config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data);\n      dispatch(addHRAction(data));\n    });\n};\n\nexport default {\n  addHRAction,\n  newHRToDB,\n  getHRAction,\n  newHRFToDB,\n  newHRGToDB,\n  createHRF,\n  editHRF\n};\n","\n// hooks/UseDataApi.js\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst url = \"http://localhost:3001/\";\n\nconst useRequest1 = (props, requestURL, getOrPost) => {\n  // This is just for demo purposes, you probably want to separate the data from loading state and potentially add other states such as failures, etc..\n  const [dataState, setDataState] = useState({ data: [], isFetching: false }); \n  const [endpointUrl] = useState(url);\n\n  useEffect(() => {\n    const fetchDataFromApi = async () => {\n      try {\n        setDataState({ ...dataState, isFetching: true });\n        console.log(endpointUrl + requestURL);\n        let response;\n        if(getOrPost === \"post\")\n        {\n            response = await axios.post(endpointUrl + requestURL, props.params);\n        }\n        else\n        {\n            response = await axios.get(endpointUrl + requestURL, props.params);\n        }\n        console.log(response);\n        setDataState({\n          ...dataState,\n          data: response.data,\n          isFetching: false\n        });\n\n      } catch (e) {\n        console.log(e);\n        setDataState({ ...dataState, isFetching: false });\n      }\n    };\n    fetchDataFromApi();\n  }, [props]); // Runs once\n\n  return [dataState];\n};\n\nexport default useRequest1;","// API CONSTANTS\n\nconst BASE_URL = 'http://localhost:3001';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/persist';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n// Redux Actions\n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\n// Fetch\n\nconst returnUserObj = () => ({\n    type: 'default'\n});\n\nconst newUserToDB = userObj => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  fetch(USERS_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      localStorage.setItem('token', data.token);\n    });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      console.log(data.user.id);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user_id', data.user.id);\n    });\n};\n\n\nconst saveHandRangeToDB = (props) => dispatch => {\n\n    let currentToken = localStorage.getItem('token');\n    console.log(\"Current token:\");\n    console.log(currentToken);\n\n    // const config = {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //   },\n    //   body: JSON.stringify(userCredentials)\n    // };\n    // fetch(LOGIN_URL, config)\n    //   .then(r => r.json())\n    //   .then(data => {\n    //     dispatch(setUserAction(data.user));\n    //     localStorage.setItem('token', data.token);\n    //   });\n  };\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config)\n    .then(r => r.json())\n    .then(userInstance => {\n      dispatch(setUserAction(userInstance));\n    });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  saveHandRangeToDB,\n  returnUserObj\n};","// API CONSTANTS\n\nconst BASE_URL = 'http://localhost:3001';\nconst HAND_RANGE_USER_URL = BASE_URL + '/hand_ranges/show_user_id/';\nconst HAND_RANGE_FOLDER_URL = BASE_URL + '/hand_range_folders/';\nconst HAND_RANGE_GROUP_URL = BASE_URL + '/hand_range_groups/';\n\n// Redux Actions\n\nconst addHRAction = hrObj => ({\n  type: 'SET_HAND_RANGE',\n  payload: hrObj\n});\nconst getHRAction = () => ({\n    type: 'GET_HAND_RANGES'\n  });\n\nconst addHRFAction = hrfObj => ({\n  type: 'SET_HAND_RANGE_FOLDER',\n  payload: hrfObj\n});\nconst createHRFAction = hrfObj => ({\n  type: 'CREATE_HAND_RANGE_FOLDER',\n  payload: hrfObj\n});\nconst addHRGAction = hrfObj => ({\n  type: 'SET_HAND_RANGE_GROUP',\n  payload: hrfObj\n});\n\nconst editHRFAction = hrfObj => ({\n  type: 'EDIT_HAND_RANGE_FOLDER',\n  payload: hrfObj\n});\n\nconst editHRF = hrFolderName => dispatch => {\n  const config = {\n    method: 'PATCH',\n    folderName: hrFolderName,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'hand_range_folders': {\n        'FolderName': hrFolderName,\n        'user_id': 1,\n        'id': 1\n      }\n    })\n  };\n  fetch(HAND_RANGE_FOLDER_URL + '1', config)\n    .then(r => r.json())\n    .then(data => {\n        console.log(data);\n        dispatch(editHRFAction(data));\n      });\n}\n\nconst createHRF = hrFolderName => dispatch => {\n  const config = {\n    method: 'POST',\n    folderName: hrFolderName,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      'FolderName': hrFolderName,\n      'user_id': 1\n    })\n  };\n  fetch(HAND_RANGE_FOLDER_URL, config)\n    .then(r => r.json())\n    .then(data => {\n        console.log(data);\n        dispatch(createHRFAction(data));\n      });\n}\n\nconst newHRFToDB = hrUserID => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log(hrUserID);\n  fetch(HAND_RANGE_FOLDER_URL, config)\n    .then(r => r.json())\n    .then(data => {\n        console.log(data);\n        dispatch(addHRFAction(data));\n      });\n    \n};\n\nconst newHRGToDB = hrUserID => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  fetch(HAND_RANGE_GROUP_URL, config)\n    .then(r => r.json())\n    .then(data => {\n        console.log(data);\n        dispatch(addHRGAction(data));\n      });\n    \n};\n\nconst newHRToDB = hrUserID => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    console.log(hrUserID);\n    fetch(HAND_RANGE_USER_URL + hrUserID, config)\n      .then(r => r.json())\n      .then(data => {\n          console.log(data);\n          dispatch(addHRAction(data));\n        });\n      \n  };\n\nexport default {\n    addHRAction,\n    newHRToDB,\n    getHRAction,\n    newHRFToDB,\n    newHRGToDB,\n    createHRF,\n    editHRF\n};","import React, { useState, useEffect } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport MainContainer from \"../../components/MainContainer\";\nimport UseRequest1API from \"../../HOC/API/useRequest1\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport userActions from \"../../reducers/actions\";\nimport hrActions from \"../../reducers/actionsHandRanges\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nexport const UserLogin = props => {\n  const url = \"users\";\n  const [postQuery, setPostQuery] = useState();\n  const [dataState] = UseRequest1API(postQuery, url);\n  const dispatch = useDispatch();\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const user_id = useSelector(state => state.rootReducer.id);\n  const userRanges = useSelector(\n    state => state.handRangesAvailable.folderNames\n  );\n  // const loginUserHandler = async (e) => {\n  //     e.preventDefault();\n  //     // console.log(e);\n  //     // console.log(e.target.username.value);\n  //     // let newData = {\"params\": {\n  //     //     \"username\": e.target.username.value,\n  //     //     \"email\": e.target.email.value,\n  //     //     //\"password\": e.target.password.value\n  //     // }}\n\n  //     // setPostQuery(newData);\n  //     // let returnData = await dataState;\n\n  //     fetch('http://localhost:3001/login', {\n  //         method: \"POST\",\n  //         headers: {\n  //             \"Content-Type\": \"application/json\",\n  //             \"Accept\": \"application/json\"\n  //         },\n  //         body: JSON.stringify({\n  //             \"username\": e.target.username.value,\n  //             \"password\": e.target.password.value\n  //         })\n  //     })\n  //     .then(resp =>resp.json())\n  //     .then(data => {\n  //         localStorage.setItem(\"token\", data.jwt);\n  //         console.log(data);\n  //     })\n\n  //  };\n\n  // controlled form functions\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await dispatch(userActions.loginUserToDB(loginForm));\n    //props.history.push('/');\n  };\n\n  useEffect(() => {\n    if (user_id) {\n      dispatch(hrActions.getHRAction(user_id));\n      dispatch(hrActions.newHRToDB(user_id));\n      dispatch(hrActions.newHRFToDB(user_id));\n      dispatch(hrActions.newHRGToDB(user_id));\n      console.log(userRanges);\n    }\n  }, [user_id]);\n\n  const handleChange = e =>\n    setLoginForm({ ...loginForm, [e.target.name]: e.target.value });\n\n  return (\n    <MainContainer>\n      <h2>User Login</h2>\n      <Form onSubmit={handleSubmit}>\n        <Form.Field>\n          <label>Username</label>\n          <input name=\"name\" placeholder=\"Name\" onChange={handleChange} />\n        </Form.Field>\n        <Form.Field>\n          <label>Password</label>\n          <input\n            name=\"password\"\n            type=\"password\"\n            onChange={handleChange}\n            placeholder=\"Password\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox label=\"I agree to the Terms and Conditions\" />\n        </Form.Field>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </MainContainer>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    reducers: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBooks: () => {\n      hrActions.getAll().then(hand_ranges =>\n        dispatch({\n          type: \"GET_HAND_RANGES\",\n          hand_ranges\n        })\n      );\n    }\n  };\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserLogin)\n);\n","import React, { useState } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\nimport UseRequest1API from \"../../HOC/API/useRequest1\";\n\nexport const UserRegister = props => {\n  const url = \"users\";\n  const [postQuery, setPostQuery] = useState();\n  const [dataState] = UseRequest1API(postQuery, url, \"post\");\n\n  const loginUserHandler = async e => {\n    e.preventDefault();\n    console.log(e);\n    console.log(e.target.username.value);\n    let newData = {\n      params: {\n        name: e.target.username.value,\n        email: e.target.email.value,\n        password: e.target.password.value,\n        password_confirmation: e.target.password.value\n      }\n    };\n\n    setPostQuery(newData);\n    let returnData = await dataState;\n  };\n\n  return (\n    <Container>\n      <h2>User Register</h2>\n      <Form onSubmit={loginUserHandler.bind(this)}>\n        <Form.Field>\n          <label>Username</label>\n          <input name=\"username\" placeholder=\"Username\" />\n        </Form.Field>\n        <Form.Field>\n          <label>Email</label>\n          <input name=\"email\" placeholder=\"Email\" />\n        </Form.Field>\n        <Form.Field>\n          <label>Password</label>\n          <input name=\"password\" type=\"password\" placeholder=\"Password\" />\n        </Form.Field>\n        <Form.Field>\n          <Checkbox label=\"I agree to the Terms and Conditions\" />\n        </Form.Field>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default UserRegister;\n","// StripeHookProvider.jsx\n\nimport React, { useContext, createContext } from 'react';\nimport { injectStripe } from 'react-stripe-elements';\n\nconst Context = createContext();\n\nexport const useStripe = () => useContext(Context);\n\nconst HookProvider = ({ children, stripe }) => {\n  return <Context.Provider value={stripe}>{children}</Context.Provider>\n};\n\nexport default injectStripe(HookProvider);","// MyForm.jsx\nimport { useStripe } from '../../HOC/useStripe/StripeHookProvider';\nimport React, {useState, useRef, useEffect} from 'react';\nimport {Form, Button} from 'semantic-ui-react';\nimport {\n  CardNumberElement,\n  CardExpiryElement,\n  CardCVCElement,\n  injectStripe\n} from 'react-stripe-elements';\nimport useRequest1API from '../../HOC/API/useRequest1';\n\n\nconst MyForm = (props) => {\n\n  // const userPay = useRef(null);\n  const amountEl = useRef(null);\n\n  const initParams = {\"params\": {\"cost\": \"5.00\", \"currency\": \"USD\"}};\n  const [postQuery, setPostQuery] = useState(initParams);\n  const [PAYMENT_INTENT_CLIENT_SECRET] = useRequest1API(postQuery, \"application\", \"post\");\n  const stripe = useStripe();\n\n\n  \n  const handleSubmit = async (e) => {\n    // We don't want to let default form submission happen here, which would refresh the page.\n    e.preventDefault();\n  \n    // Use Elements to get a reference to the Card Element mounted somewhere\n    // in your <Elements> tree. Elements will know how to find your Card Element\n    // because only one is allowed.\n    // See our getElement documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#elements-get-element\n    let { token } = await stripe.createToken();\n    console.log(token.id);\n    console.log();\n    setPostQuery({\"params\": {\n                        amount: amountEl.current.value,\n                        tokobj: token,\n                        tok: token.id,\n                        receipt_email: 'evanontario009@gmail.com'}});\n\n    console.log(PAYMENT_INTENT_CLIENT_SECRET.status === 200);\n    \n    };\n  return (\n    <div className=\"checkout-form\">\n      <form onSubmit={handleSubmit.bind(this)}>\n        <label>\n          Amount in Cents:\n          <input ref={amountEl}/>\n        </label><br />\n        <label>\n          Card details\n          <CardNumberElement />\n        </label>\n        <label>\n          Expiration date\n          <CardExpiryElement />\n        </label>\n        <label>\n          CVC\n          <CardCVCElement />\n        </label>\n        <button type=\"submit\" className=\"order-button\">\n          Pay\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default injectStripe(MyForm);","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Board from \"../../components/board/board\";\nimport MainPage from \"../MainPage/index\";\nimport UserLogin from \"../Auth/UserLogin\";\nimport UserRegister from \"../Auth/UserRegister\";\n// import { useStripe } from \"../../HOC/useStripe/useStripe\";\n// import { StripeProvider, Elements } from \"react-stripe-elements\";\nimport MyForm from \"../MyForm/MyForm\";\nimport useRequest1API from \"../../HOC/API/useRequest1\";\nimport StripeHookProvider from \"../../HOC/useStripe/StripeHookProvider\";\nimport { BrowserRouter, Route, NavLink, Switch } from \"react-router-dom\";\nimport { Menu } from \"semantic-ui-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport userActions from \"../../reducers/actions.js\";\n\nfunction App() {\n  // const [stripe, setStripe] = useState(null);\n  const username = useSelector(state => state.user);\n\n  // useEffect(() => {\n  //   if (window.Stripe) {\n  //     setStripe(window.Stripe(\"pk_test_3QHFTQccclvodS2QXldeAkSh00qBGSooM3\"));\n  //   } else {\n  //     document.querySelector(\"#stripe-js\").addEventListener(\"load\", function() {\n  //       setStripe(window.Stripe(\"pk_test_3QHFTQccclvodS2QXldeAkSh00qBGSooM3\"));\n  //     });\n  //   }\n\n  //   // const token = localStorage.getItem(\"token\");\n  //   // if (token) {\n  //   //   fetch(`http://localhost:3001/auto_login`, {\n  //   //     headers: {\n  //   //       Authorization: `Bearer ${token}`\n  //   //     }\n  //   //   })\n  //   //   .then(resp => resp.json())\n  //   //   .then(data =>{\n  //   //     console.log(data);\n  //   //   });\n  //   // }\n  // }, []);\n\n  // const handleAuthClick = () => {\n  //   const token = localStorage.getItem(\"token\");\n  //   fetch(`http://localhost:3001/auto_login`, {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`\n  //     }\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(data => {\n  //       console.log(data);\n  //     });\n  // };\n\n  const dispatch = useDispatch();\n  const handleLogout = () => {\n    dispatch(userActions.logoutUser());\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Menu inverted>\n            <Menu.Item>\n              <NavLink to=\"/\">Home</NavLink>\n            </Menu.Item>\n            {username ? (\n              <>\n                <Menu.Item>{username}</Menu.Item>\n                <Menu.Item>\n                  <NavLink to=\"/donate\">Donate</NavLink>\n                </Menu.Item>\n                <Menu.Item>\n                  <NavLink to=\"/\" onClick={handleLogout}>\n                    Logout\n                  </NavLink>\n                </Menu.Item>\n              </>\n            ) : (\n              <>\n                <Menu.Item>\n                  <NavLink to=\"/register\">Register</NavLink>\n                </Menu.Item>\n                <Menu.Item>\n                  <NavLink to=\"/login\">Login</NavLink>\n                </Menu.Item>\n              </>\n            )}\n          </Menu>\n          <Switch>\n            <Route path=\"/register\" exact component={UserRegister} />\n            <Route path=\"/login\" exact component={UserLogin} />\n            {/* <Route\n              path=\"/donate\"\n              exact\n              render={() => {\n                return (\n                  <StripeProvider {...{ stripe }}>\n                    <Elements>\n                      <StripeHookProvider>\n                        <MyForm stripe={stripe} />\n                      </StripeHookProvider>\n                    </Elements>\n                  </StripeProvider>\n                );\n              }}\n            /> */}\n            <Route path=\"/\" exact component={MainPage} />\n          </Switch>\n        </header>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (error) {\n    // Ignore write errors\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\nimport handRangesAvailable from \"./reducers/HandRanges\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport throttle from \"lodash/throttle\";\nimport history from \"./utils/history\";\nimport { saveState } from \"./localStorage\";\nimport configureStore from \"./configureStore\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { ThemeProvider } from \"styled-components\";\n\n//const store = createStore(combineReducers({rootReducer, handRangesAvailable}), applyMiddleware(thunk));\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById(\"app\");\n\nstore.subscribe(\n  throttle(() => {\n    const { global, user, order } = store.getState();\n    saveState({ global, user, order });\n  }, 1000)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ThemeProvider theme={{ main: \"mediumseagreen\" }}>\n        <App data-test=\"AppComponent\" />\n      </ThemeProvider>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport createReducer from \"./reducers\";\nimport { loadState } from \"./localStorage\";\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== \"production\" && typeof window === \"object\") {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    // /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const persistedState = loadState();\n\n  const store = createStore(\n    createReducer(),\n    // initialState,\n    persistedState,\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"],"sourceRoot":""}