function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

var AxiosProvider = function (_React$Component) {
  _inherits(AxiosProvider, _React$Component);

  function AxiosProvider(props) {
    _classCallCheck(this, AxiosProvider);

    return _possibleConstructorReturn(this, _React$Component.call(this, props));
  }

  AxiosProvider.prototype.getChildContext = function getChildContext() {
    return { axios: this.props.instance };
  };

  AxiosProvider.prototype.render = function render() {
    return this.props.children;
  };

  return AxiosProvider;
}(React.Component);

AxiosProvider.childContextTypes = {
  axios: PropTypes.func
};

AxiosProvider.defaultProps = {};

AxiosProvider.propTypes = {
  instance: PropTypes.func.isRequired,
  children: PropTypes.any.isRequired
};

export default AxiosProvider;