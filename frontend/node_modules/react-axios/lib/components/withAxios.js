'use strict';

exports.__esModule = true;
exports.withAxios = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Request = require('./Request');

var _Request2 = _interopRequireDefault(_Request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withAxios = exports.withAxios = function withAxios() {
  var mixed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (typeof mixed === 'function') {
    // basic axios provider HoC
    var WrappedComponent = mixed;
    var AxiosExtracter = function AxiosExtracter(props, context) {
      return _react2.default.createElement(WrappedComponent, _extends({ axios: context.axios || _axios2.default }, props));
    };

    AxiosExtracter.contextTypes = {
      axios: _propTypes2.default.func
    };
    return AxiosExtracter;
  }
  // advanced Request provider HoC
  var options = _extends({}, _Request2.default.defaultProps, mixed);
  return function (WrappedComponent) {
    // validate the options passed in are valid request propTypes.
    _propTypes2.default.checkPropTypes(_extends({}, _Request2.default.propTypes, {
      method: _propTypes2.default.string // not required if the user just wants access to the axios instance
    }), options, 'option', 'withAxios()(' + WrappedComponent.name + ')');

    var ReactAxiosExtracter = function (_React$PureComponent) {
      _inherits(ReactAxiosExtracter, _React$PureComponent);

      function ReactAxiosExtracter() {
        _classCallCheck(this, ReactAxiosExtracter);

        return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
      }

      ReactAxiosExtracter.prototype.render = function render() {
        var _this2 = this;

        // allow overriding the config initial options
        var newOptions = _extends({}, options, this.props.options);
        return _react2.default.createElement(
          _Request2.default,
          newOptions,
          function (error, response, isLoading, makeRequest, axios) {
            return _react2.default.createElement(WrappedComponent, _extends({}, _this2.props, {
              error: error,
              response: response,
              isLoading: isLoading,
              makeRequest: makeRequest,
              axios: axios,
              options: newOptions
            }));
          }
        );
      };

      return ReactAxiosExtracter;
    }(_react2.default.PureComponent);

    ReactAxiosExtracter.propTypes = {
      options: _propTypes2.default.object
    };
    return ReactAxiosExtracter;
  };
};

exports.default = withAxios;