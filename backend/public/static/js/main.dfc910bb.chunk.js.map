{"version":3,"sources":["containers/MainPage/constants.js","containers/MainPage/sampleData.js","containers/MainPage/stateRangeFunctions.js","containers/MainPage/reducer.js","containers/MainPage/selectors.js","containers/MainPage/actions.js","containers/MainPage/Board/index.js","HOC/checkStore.js","utils/history.js","containers/Auth/constants.js","containers/Auth/reducer.js","reducers.js","HOC/reducerInjectors.js","HOC/useInjectReducer.js","containers/MainPage/BoardLegend/BoardLegend.js","HOC/constants.js","HOC/sagaInjectors.js","HOC/injectSaga.js","utils/request.js","containers/MainPage/saga.js","containers/MainPage/ProductDescription/index.js","containers/MainPage/UserFunctionality/FolderGroup/HandRangeContainer.js","containers/MainPage/UserFunctionality/FolderGroup/index.js","containers/MainPage/UserFunctionality/index.js","containers/MainPage/InputForm/BoardCards.js","containers/MainPage/InputForm/index.js","containers/MainPage/index.js","components/NavBar/index.js","components/MainContainer/index.js","containers/App/App.js","serviceWorker.js","localStorage.js","containers/Auth/actions.js","containers/Auth/saga.js","containers/Auth/selectors.js","containers/Auth/Register/UserRegister.js","containers/Auth/Login/UserLogin.js","index.js","configureStore.js"],"names":["SET_HAND_RANGE","SET_HAND_RANGE_SELECT","INIT_ALL_USER_HAND_RANGES","INIT_CREATE_NEW_FOLDER","SET_DEAD_CARDS","sampleData","mode","street","streetAction","rangeSelectionArray","folderID","folderSubgroupName","folderSubgroupRangeName","rangeColors","ranges","Street","BetType","hands","saveOldRangeRepo","rangeRepo","draftRanges","defaultRanges","JSON","parse","stringify","map","repositoryRange","FolderName","FolderGroupName","Position","loadNewRange","actionData","filter","initialState","deadcards","mainPageReducer","state","action","produce","draft","type","data","name","value","console","log","GroupName","RangeName","RangeScope","selectGlobal","global","selectUser","user","makeSelectMode","createSelector","globalState","makeSelectRanges","makeSelectUser","userState","makeSelectDeadcards","setHandRangeSelect","initAllUserHandRanges","createNewFolderFail","setDynamicFolderInfo","ColorCard","styled","animated","button","props","coloring","border_attrib","StyledRow","Row","StyledCol","Col","orderedCard","displayCardSuit","cardOne","cardTwo","indexOf","getCards","card1","card2","withConnect","connect","getRangesPreflop","getRangesPreflopOnly","PreflopRanges","PreflopRangesOnly","compose","memo","onMouseOverHandler","useState","manyHands","setManyHands","cards","setCards","useEffect","cardClone","forEach","hand","idx","colorCards","bind","useGesture","onDrag","args","length","onMouseDownEvent","down","first","threshold","filterTaps","onMove","delay","allPreflopHands","reduce","acc","curr","setNewManyHands","push","row","columnJSX","cardHand","xs","key","id","Container","fluid","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","history","createBrowserHistory","USER_SIGNIN","USER_SIGNIN_FAIL","USER_LOADED","CLEAR_ERROR_STATE","INIT_REGISTER_USER","REGISTER_USER_FAIL","loading","error","invalid","message","email","token","authReducer","params","createReducer","rootReducer","combineReducers","globalReducer","router","connectRouter","injectReducerFactory","isValid","reducer","isString","isEmpty","Reflect","has","getInjectors","injectReducer","useInjectReducer","context","React","useContext","ReactReduxContext","StyledContainer","StyledGreenRow","Table","StyledVioletRow","StyledBlueRow","StyledRedRow","StyledInvertedHeader","Header","StyledInvertedRow","legendTable","numberOfCombos","nameOfAction","onHandleStreetHandlerButtons","streetActions","HeaderCell","Body","Cell","toFixed","Button","onClick","e","countHandCombo","wholeRange","chosenStreet","board","filteredBoard","trim","boardCard","charAt","specificHands","addCombos","totalHands","acc2","specificCards","Object","keys","numOccurances","_","countBy","split","comboCounter","getDeadcards","getMode","onHandleStreetHandler","Preflop","Flop","Turn","River","updateNumberOfCombos","panes","menuItem","render","Tab","menu","tabular","onTabChange","DAEMON","allowedModes","checkKey","checkDescriptor","descriptor","saga","includes","injectSagaFactory","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectSaga","ejectSaga","useInjectSaga","injectors","parseJSON","response","status","json","checkStatus","Error","statusText","request","url","options","fetch","then","baseURL","getAllHandRanges","registerUser","createNewFolder","handData","requestUrl","call","allRanges","put","headers","body","requestParams","method","user_id","folder_name","all","takeLatest","process","ProductDescription","StyledButton","isactive","HandRangeContainer","folderName","folderGroupName","useDispatch","activeIndex","updateActiveIndex","onClickHandler","target","newFolder","FolderGroup","folderIdx","getFolderGroup","selectedFolder","UTG","MP","CO","BU","SB","BB","data-test","vertical","Folder","getFolder","Form","img","BoardCard","displayCard","alt","src","md","lg","className","Array","isArray","toUpperCase","DeadCards","Input","label","placeholder","onChange","MainPageContainer","div","LeftPane","RightPane","getMapRange","getSelectRange","getUser","toAllUserHandRange","newHandRange","oldHandRange","draftModeStreet","draftModeStreetAction","actionDataCards","rangeObj","hasStreetAndCurrentBetType","hasHandInRange","handsWithRemovedCards","indexHandInRange","splice","setHandRange","Navbar","username","useAuth0","isAuthenticated","loginWithRedirect","logout","Menu","inverted","Item","to","MainContainer","children","StyledFragment","steps","selector","content","mapStateToProps","createStructuredSelector","useSelector","isTourOpen","updateTourOpen","isOpen","onRequestClose","Boolean","window","location","hostname","match","loadState","serializedState","localStorage","getItem","userSignin","userSigninSuccess","userSigninFail","logoutSaga","authStateSaga","userSigninSaga","userSignupSaga","userRoot","userid","requestURL","Authorization","password","setItem","err","code","str","toString","replace","qs","getParams","password_confirmation","registerForm","updateRegisterForm","onChangeHandler","newFormValues","onSubmit","composeEnhancers","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","persistedState","createStore","run","configureStore","throttle","saveState","siteUrl","ReactDOM","domain","config","client_id","clientId","redirect_uri","onRedirectCallback","appState","pathname","theme","main","exact","path","component","App","UserRegister","Login","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfc910bb.chunk.js","sourcesContent":["/*\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const SET_HAND_RANGE = \"handrangeAPI/MainPage/SET_HAND_RANGE\";\nexport const SET_HAND_RANGE_SELECT =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_SELECT\";\nexport const INIT_ALL_USER_HAND_RANGES =\n  \"handrangeAPI/MainPage/INIT_ALL_USER_HAND_RANGES\";\n\nexport const ALL_USER_HAND_RANGES_SUCCESS =\n  \"handrangeAPI/MainPage/ALL_USER_HAND_RANGES_SUCCESS\";\n\nexport const ALL_USER_HAND_RANGES_FAIL =\n  \"handrangeAPI/MainPage/ALL_USER_HAND_RANGES_FAIL\";\n\nexport const INIT_CREATE_NEW_FOLDER =\n  \"handrangeAPI/MainPage/INIT_CREATE_NEW_FOLDER\";\nexport const CREATE_NEW_FOLDER_SUCCESS =\n  \"handrangeAPI/MainPage/CREATE_NEW_FOLDER_SUCCESS\";\nexport const CREATE_NEW_FOLDER_FAIL =\n  \"handrangeAPI/MainPage/CREATE_NEW_FOLDER_FAIL\";\n\nexport const SET_HAND_RANGE_GROUP =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_GROUP\";\n\nexport const SET_DYNAMIC_FOLDER_INFO =\n  \"handrangeAPI/MainPage/SET_DYNAMIC_FOLDER_INFO\";\n\nexport const SAVE_AND_LOAD = \"handrangeAPI/MainPage/SAVE_AND_LOAD\";\n\nexport const LOAD_NEW_FOLDER = \"handrangeAPI/MainPage/LOAD_NEW_FOLDER\";\n\nexport const SET_DEAD_CARDS = \"handrangeAPI/MainPage/SET_DEAD_CARDS\";\nexport const GET_DEAD_CARDS = \"handrangeAPI/MainPage/GET_DEAD_CARDS\";\n","const sampleData = {\n  mode: {\n    street: \"Preflop\",\n    streetAction: \"Raise4BetCall\"\n  },\n  rangeSelectionArray: {\n    folderID: \"Evan's Second Folder\",\n    folderSubgroupName: \"Opening Ranges\",\n    folderSubgroupRangeName: \"UTG\"\n  },\n  rangeColors: {\n    \"0\": [],\n    \"1\": [],\n    \"2\": [],\n    \"3\": []\n  }\n};\n\nconst ranges = [\n  {\n    Street: \"Preflop\",\n    BetType: \"Raise4BetCall\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"Raise4BetFold\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"RaiseCall\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"RaiseFold\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"CheckFold\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"CheckFold\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"CheckFold\",\n    hands: []\n  }\n];\n\nconst rangeRepo = [\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Opening Ranges\",\n    Position: \"UTG\",\n    ranges: ranges\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Opening Ranges\",\n    Position: \"MP\",\n    ranges: ranges\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Opening Ranges\",\n    Position: \"CO\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Opening Ranges\",\n    Position: \"BU\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Opening Ranges\",\n    Position: \"SB\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Defending Ranges\",\n    Position: \"UTG\",\n    ranges: [{}]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Defending Ranges\",\n    Position: \"MP\",\n    ranges: [{}]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Defending Ranges\",\n    Position: \"CO\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Defending Ranges\",\n    Position: \"BU\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  },\n  {\n    FolderName: \"Evan's Second Folder\",\n    FolderGroupName: \"Defending Ranges\",\n    Position: \"SB\",\n    ranges: [\n      {\n        Street: \"Preflop\",\n        BetType: \"Raise4BetCall\",\n        hands: []\n      }\n    ]\n  }\n];\n\nexport { sampleData, ranges, rangeRepo };\n","import initialState from \"./reducer\";\nimport { ranges } from \"./sampleData\";\n\nexport const mapNewHandRange = (\n  oldHandRange,\n  draftModeStreet,\n  draftModeStreetAction,\n  actionDataCards\n) =>\n  oldHandRange.map((rangeObj, idx) => {\n    let hasStreetAndCurrentBetType =\n      rangeObj.Street == draftModeStreet &&\n      rangeObj.BetType == draftModeStreetAction;\n    let hasHandInRange = rangeObj.hands.indexOf(actionDataCards) >= 0;\n    if (hasStreetAndCurrentBetType && hasHandInRange) {\n      let handsWithRemovedCards = JSON.parse(JSON.stringify(rangeObj.hands));\n      let indexHandInRange = handsWithRemovedCards.indexOf(actionDataCards);\n      let numberHandsToRemove = 1;\n      handsWithRemovedCards.splice(indexHandInRange, numberHandsToRemove);\n      return {\n        Street: rangeObj.Street,\n        BetType: rangeObj.BetType,\n        hands: handsWithRemovedCards\n      };\n    }\n    if (hasStreetAndCurrentBetType && !hasHandInRange)\n      return {\n        Street: rangeObj.Street,\n        BetType: rangeObj.BetType,\n        hands: [...rangeObj.hands, actionDataCards]\n      };\n\n    return { ...rangeObj, hands: rangeObj.hands };\n  });\n\nexport const saveOldRangeRepo = (\n  rangeRepo,\n  rangeSelectionArray,\n  draftRanges\n) => {\n  let defaultRanges = JSON.parse(JSON.stringify(draftRanges));\n  let rangeRepos = rangeRepo.map(repositoryRange => {\n    if (\n      repositoryRange.FolderName == rangeSelectionArray.folderID &&\n      repositoryRange.FolderGroupName ==\n        rangeSelectionArray.folderSubgroupName &&\n      repositoryRange.Position == rangeSelectionArray.folderSubgroupRangeName\n    )\n      return {\n        FolderName: rangeSelectionArray.folderID,\n        FolderGroupName: rangeSelectionArray.folderSubgroupName,\n        Position: rangeSelectionArray.folderSubgroupRangeName,\n        ranges: defaultRanges || ranges\n      };\n    else\n      return {\n        FolderName: repositoryRange.FolderName,\n        FolderGroupName: repositoryRange.FolderGroupName,\n        Position: repositoryRange.Position,\n        ranges: repositoryRange.ranges || ranges\n      };\n  });\n  return rangeRepos;\n};\nexport const loadNewRange = (rangeRepo, actionData) => {\n  let filteredForPosition = rangeRepo?.filter(\n    ({ FolderName, FolderGroupName, Position }) =>\n      actionData.folderID == FolderName &&\n      actionData.folderSubgroupName == FolderGroupName &&\n      actionData.folderSubgroupRangeName == Position\n  )[0]?.ranges;\n\n  return filteredForPosition;\n};\n","import produce from \"immer\";\n\nimport {\n  SET_HAND_RANGE,\n  SET_HAND_RANGE_SELECT,\n  INIT_CREATE_NEW_FOLDER,\n  CREATE_NEW_FOLDER_SUCCESS,\n  CREATE_NEW_FOLDER_FAIL,\n  SET_HAND_RANGE_GROUP,\n  SET_DYNAMIC_FOLDER_INFO,\n  SAVE_AND_LOAD,\n  LOAD_NEW_FOLDER,\n  INIT_ALL_USER_HAND_RANGES,\n  ALL_USER_HAND_RANGES_SUCCESS,\n  ALL_USER_HAND_RANGES_FAIL,\n  SET_DEAD_CARDS\n} from \"./constants.js\";\n\nimport { saveOldRangeRepo, loadNewRange } from \"./stateRangeFunctions\";\nimport { sampleData, ranges, rangeRepo } from \"./sampleData.js\";\n\nconst initialState = {\n  mode: sampleData.mode,\n  rangeSelectionArray: sampleData.rangeSelectionArray,\n  rangeColors: sampleData.rangeColors,\n  rangeRepo: rangeRepo,\n  ranges: ranges,\n  deadcards: []\n};\n\n//TODO: Make ranges convert between easy to read ranges\nconst mainPageReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case SET_HAND_RANGE_SELECT:\n        draft.mode.street = action.data.name || \"Preflop\";\n        draft.mode.streetAction = action.data.value;\n        break;\n\n      case SET_HAND_RANGE:\n        draft.ranges = action.data;\n\n        break;\n\n      case INIT_CREATE_NEW_FOLDER:\n        break;\n\n      case CREATE_NEW_FOLDER_SUCCESS:\n        //Populate the range repository that holds all ranges from the DB\n        console.log(action.data);\n        break;\n\n      case SET_DYNAMIC_FOLDER_INFO:\n        draft.rangeRepo = saveOldRangeRepo(\n          draft.rangeRepo,\n          draft.rangeSelectionArray,\n          draft.ranges\n        );\n        draft.rangeSelectionArray = action.data;\n        draft.ranges = loadNewRange(draft.rangeRepo, action.data);\n\n        break;\n\n      case INIT_ALL_USER_HAND_RANGES:\n        draft.ranges = initialState.ranges;\n        break;\n\n      case ALL_USER_HAND_RANGES_SUCCESS:\n        //Populate the range repository that holds all ranges from the DB\n        draft.rangeRepo = action.data.map(\n          ({ FolderName, GroupName, RangeName, RangeScope }) => {\n            return {\n              FolderName,\n              FolderGroupName: GroupName,\n              Position: RangeName,\n              ranges: RangeScope\n            };\n          }\n        );\n        break;\n\n      case ALL_USER_HAND_RANGES_FAIL:\n        break;\n\n      case SET_DEAD_CARDS:\n        draft.deadcards = action.data;\n        break;\n\n      default:\n        break;\n    }\n  });\nexport default mainPageReducer;\nexport { initialState };\n","/**\n * The home state selectors\n */\n\nimport { createSelector } from \"reselect\";\n\nimport { initialState } from \"./reducer\";\n\nconst selectGlobal = state =>\n  state.global || JSON.parse(JSON.stringify(initialState)); //??\nconst selectRouter = state => state.router;\n\nconst selectUser = state => state.user;\n\nconst makeSelectMode = () => {\n  return createSelector(selectGlobal, globalState => {\n    return globalState.mode;\n  });\n};\nconst makeSelectRanges = () => {\n  return createSelector(selectGlobal, global => {\n    if (\n      global &&\n      global.mode &&\n      global.mode.street &&\n      global.mode.streetAction &&\n      global.ranges\n    ) {\n      return global.ranges.filter(({ Street, BetType }) => {\n        return (\n          Street == global.mode.street && BetType == global.mode.streetAction\n        );\n      })[0];\n    } else return initialState;\n  });\n};\n\n//FIXME: Needs a rename because its all ranges\nconst makeSelectRangesPreflop = () => {\n  return createSelector(selectGlobal, global => {\n    if (global && global.mode && global.mode.street && global.mode.streetAction)\n      return global.ranges.filter(({ Street }) => Street == global.mode.street);\n    else return initialState.ranges.filter(({ Street }) => Street == \"Preflop\");\n  });\n};\n\nconst makeSelectRangesPreflopOnly = () => {\n  return createSelector(selectGlobal, global => {\n    if (global && global.mode && global.mode.street && global.mode.streetAction)\n      return global.ranges.filter(({ Street }) => Street == \"Preflop\");\n    else return initialState.ranges.filter(({ Street }) => Street == \"Preflop\");\n  });\n};\n\nconst makeSelectRange = () =>\n  createSelector(selectGlobal, globalState => globalState.ranges); //??\n\nconst makeSelectRangeColors = () =>\n  createSelector(selectGlobal, globalState => globalState.rangeColors);\n\nconst makeSelectUser = () => createSelector(selectUser, userState => userState);\n\nconst makeSelectFolder = () =>\n  createSelector(selectGlobal, globalState => {\n    if (globalState.rangeRepo) {\n      let returnValues = globalState.rangeRepo.reduce((acc, { FolderName }) => {\n        if (acc.indexOf(FolderName) >= 0) return acc;\n        else return [...acc, FolderName];\n      }, []);\n      return returnValues;\n    }\n  });\n\nconst makeSelectFolderGroup = () =>\n  createSelector(selectGlobal, globalState => {\n    if (globalState.rangeRepo) {\n      const selectedFolder = globalState.rangeSelectionArray.folderID;\n      let selectedFolderRange = globalState.rangeRepo.filter(\n        ({ FolderName }) => FolderName == selectedFolder\n      );\n\n      let returnValues = selectedFolderRange.reduce(\n        (acc, { FolderGroupName }) => {\n          if (acc.indexOf(FolderGroupName) >= 0) return acc;\n          else return [...acc, FolderGroupName];\n        },\n        []\n      );\n\n      return returnValues;\n    }\n  });\n\nconst makeSelectFolderRanges = () =>\n  createSelector(selectGlobal, globalState => {\n    if (globalState.rangeRepo)\n      return Object.keys(globalState.rangeRepo).map(folder =>\n        Object.keys(folder).reduce(() => {\n          return { position: globalState[\"rangeRepo\"][folder] };\n        })\n      );\n    else return {};\n  });\n\nconst makeSelectDeadcards = () =>\n  createSelector(selectGlobal, globalState => globalState.deadcards);\n\nexport {\n  selectGlobal,\n  selectRouter,\n  makeSelectRanges,\n  makeSelectRangesPreflop,\n  makeSelectRangesPreflopOnly,\n  makeSelectRange,\n  makeSelectMode,\n  makeSelectUser,\n  makeSelectFolder,\n  makeSelectFolderGroup,\n  makeSelectRangeColors,\n  makeSelectDeadcards\n};\n","import {\n  SET_HAND_RANGE,\n  SET_HAND_RANGE_SELECT,\n  INIT_ALL_USER_HAND_RANGES,\n  ALL_USER_HAND_RANGES_SUCCESS,\n  ALL_USER_HAND_RANGES_FAIL,\n  INIT_CREATE_NEW_FOLDER,\n  CREATE_NEW_FOLDER_SUCCESS,\n  CREATE_NEW_FOLDER_FAIL,\n  SET_HAND_RANGE_GROUP,\n  SET_DYNAMIC_FOLDER_INFO,\n  SAVE_AND_LOAD,\n  LOAD_NEW_FOLDER,\n  SET_DEAD_CARDS,\n  GET_DEAD_CARDS\n} from \"./constants\";\n\nexport function setHandRangeSelect(data) {\n  return {\n    type: SET_HAND_RANGE_SELECT,\n    data\n  };\n}\n\nexport function setHandRange(data) {\n  return {\n    type: SET_HAND_RANGE,\n    data\n  };\n}\n\nexport function initAllUserHandRanges() {\n  return {\n    type: INIT_ALL_USER_HAND_RANGES\n  };\n}\n\nexport function allUserHandRangesSuccess(data) {\n  return {\n    type: ALL_USER_HAND_RANGES_SUCCESS,\n    data\n  };\n}\n\nexport function allUserHandRangesFail() {\n  return {\n    type: ALL_USER_HAND_RANGES_FAIL\n  };\n}\n\nexport function initCreateNewFolder(data) {\n  return {\n    type: INIT_CREATE_NEW_FOLDER,\n    data\n  };\n}\n\nexport function createNewFolderSuccess(data) {\n  return {\n    type: CREATE_NEW_FOLDER_SUCCESS,\n    data\n  };\n}\n\nexport function createNewFolderFail(data) {\n  return {\n    type: CREATE_NEW_FOLDER_FAIL,\n    data\n  };\n}\n\nexport function setHandRangeGroup(data) {\n  return {\n    type: SET_HAND_RANGE_GROUP,\n    data\n  };\n}\n\nexport function setDynamicFolderInfo(data) {\n  return {\n    type: SET_DYNAMIC_FOLDER_INFO,\n    data\n  };\n}\n\nexport function saveAndLoad() {\n  return {\n    type: SAVE_AND_LOAD\n  };\n}\n\nexport function loadNewFolder() {\n  return {\n    type: LOAD_NEW_FOLDER\n  };\n}\n\nexport function setDeadCards(data) {\n  return {\n    type: SET_DEAD_CARDS,\n    data\n  };\n}\n","import React, { useState, useEffect, memo } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDrag, useGesture, useMove } from \"react-use-gesture\";\nimport { useSpring, animated } from \"react-spring\";\n\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport {\n  makeSelectRangesPreflop,\n  makeSelectRangesPreflopOnly\n} from \"../selectors\";\n\nimport { setHandRange } from \"../actions.js\";\nimport styled from \"styled-components\";\n\n//TODO: implement interact.js or draggable instead of this react library\n\nconst ColorCard = styled(animated.button)`\n  cursor: pointer;\n  padding-left: 0px;\n  padding-right: 2px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  width: 100% !important;\n  height: 40px !important;\n  margin: 0px;\n  font-size: 7px;\n  text-align: center;\n  color: black;\n  background-color: ${props => props.coloring};\n  ${props =>\n    props.border_attrib ? \"border: 3px dashed black;\" : \"border: none;\"}\n  @media (min-width: 576px) and (max-width: 767.98px) {\n    width: 20px;\n    padding: 5px;\n    font-size: 12px;\n  }\n  @media (min-width: 768px) and (max-width: 991.98px) {\n    width: 30px;\n    padding: 5px;\n    font-size: 12px;\n  }\n  @media (min-width: 992px) {\n    width: 30px;\n    padding: 10px;\n    font-size: 12px;\n  }\n`;\n\nconst StyledRow = styled(Row)`\n  margin: 0px;\n  width: 100%;\n  flex-wrap: nowrap !important;\n`;\n\nconst StyledCol = styled(Col)`\n  margin: 0px;\n  width: 100% !important;\n  height: 40px !important;\n  padding-left: 0px !important;\n  padding-right: 0px !important;\n  justify-content: flex-start;\n`;\nconst orderedCard = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"T\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\"\n];\nconst displayCardSuit = (cardOne, cardTwo) => {\n  let displaySuit = \"\";\n  if (orderedCard.indexOf(cardOne) < orderedCard.indexOf(cardTwo)) {\n    displaySuit = \"s\";\n  } else if (cardOne === cardTwo) {\n    displaySuit = \"\";\n  } else {\n    displaySuit = \"o\";\n  }\n  return displaySuit;\n};\n\nlet getCards = (cardOne, cardTwo) => {\n  let card1 = \"\",\n    card2 = \"\";\n  if (orderedCard.indexOf(cardOne) < orderedCard.indexOf(cardTwo)) {\n    card1 = cardOne;\n    card2 = cardTwo;\n  } else if (cardOne === cardTwo) {\n    card1 = cardOne;\n    card2 = cardTwo;\n  } else {\n    card1 = cardTwo;\n    card2 = cardOne;\n  }\n  return card1 + card2;\n};\n\nconst Board = ({ onMouseOverHandler, PreflopRanges, PreflopRangesOnly }) => {\n  const [manyHands, setManyHands] = useState();\n  const [cards, setCards] = useState({});\n\n  //This sets the cards to a value for reading later, listing the cards and\n  //the color in a single column is annoying/tedious\n  useEffect(() => {\n    let cardClone = {};\n\n    orderedCard.forEach(cardOne =>\n      orderedCard.forEach(cardTwo => {\n        let hand =\n          getCards(cardOne, cardTwo) + displayCardSuit(cardOne, cardTwo);\n        if (PreflopRanges) {\n          PreflopRanges.forEach(({ Street, BetType, hands }, idx) => {\n            if (hands.indexOf(hand) >= 0) {\n              cardClone = {\n                ...cardClone,\n                [hand]: {\n                  colorCards: [\"#8bddbe\", \"#ed87a7\", \"#6b6c7c\", \"#d3d3d3\"][idx]\n                }\n              };\n            }\n          });\n        }\n      })\n    );\n\n    setCards(cardClone);\n  }, [PreflopRanges]);\n\n  // Set the drag hook and define component movement based on gesture data\n  const bind = useGesture({\n    onDrag: props =>\n      onMouseOverHandler(\n        {\n          cards: props.args[props.args.length - 1],\n          onMouseDownEvent:\n            (props.memo !== props.args[props.args.length - 1] && props.down) ||\n            (props.first && props.down)\n        },\n        { threshold: 40, filterTaps: false }\n      ),\n    onMove: props =>\n      onMouseOverHandler(\n        {\n          cards: props.args[props.args.length - 1],\n          onMouseDownEvent:\n            (props.memo !== props.args[0] && props.down) ||\n            (props.first && props.down)\n        },\n        { threshold: 40, delay: true }\n      )\n  });\n\n  useEffect(() => {\n    let allPreflopHands = PreflopRangesOnly.reduce((acc, curr) => {\n      if (acc.hands && curr.hands) return [...acc.hands, ...curr.hands];\n      else return [...acc, ...curr.hands];\n    });\n\n    let toSetManyHands = [];\n\n    toSetManyHands = orderedCard.map(cardOne =>\n      orderedCard.reduce((acc, cardTwo, idx) => {\n        acc.push([cardOne, cardTwo]);\n        return acc;\n      }, [])\n    );\n\n    let setNewManyHands = toSetManyHands.map((row, idx) => {\n      let columnJSX = row.map(([cardOne, cardTwo]) => {\n        let cardHand =\n          getCards(cardOne, cardTwo) + displayCardSuit(cardOne, cardTwo);\n\n        return (\n          <StyledCol xs={1} key={cardHand}>\n            <ColorCard\n              key={\"colorcard\" + cardHand}\n              id={\"colorButton\" + cardHand}\n              {...bind(cardHand)}\n              hand={cardHand}\n              coloring={cards[cardHand] ? cards[cardHand].colorCards : \"#AAA\"}\n              border_attrib={allPreflopHands.indexOf(cardHand) >= 0}\n            >\n              {cardHand}\n            </ColorCard>\n          </StyledCol>\n        );\n      });\n      return <StyledRow xs={13}>{columnJSX}</StyledRow>;\n    });\n\n    setManyHands(setNewManyHands);\n  }, [cards, bind, PreflopRangesOnly]);\n\n  return <Container fluid>{manyHands}</Container>; //TO-DO: BUG this generates console error\n};\n\nconst mapStateToProps = () => {\n  const getRangesPreflop = makeSelectRangesPreflop();\n  const getRangesPreflopOnly = makeSelectRangesPreflopOnly();\n\n  const mapState = state => {\n    return {\n      PreflopRanges: getRangesPreflop(state),\n      PreflopRangesOnly: getRangesPreflopOnly(state)\n    };\n  };\n\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(Board);\n","import { conformsTo, isFunction, isObject } from \"lodash\";\nimport invariant from \"invariant\";\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  const shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(\n    conformsTo(store, shape),\n    \"(app/utils...) injectors: Expected a valid redux store\"\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","/*\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const VALIDATE_TOKEN_SUCCESS =\n  \"handrangeAPI/Auth/VALIDATE_TOKEN_SUCCESS\";\nexport const VALIDATE_TOKEN_FAIL = \"handrangeAPI/Auth/VALIDATE_TOKEN_FAIL\";\n\nexport const USER_SIGNUP = \"handrangeAPI/Auth/USER_SIGNUP\";\nexport const USER_SIGNUP_SUCCESS = \"handrangeAPI/Auth/USER_SIGNUP_SUCCESS\";\nexport const USER_SIGNUP_FAIL = \"handrangeAPI/Auth/USER_SIGNUP_FAIL\";\n\nexport const USER_SIGNIN = \"handrangeAPI/Auth/USER_SIGNIN\";\nexport const USER_SIGNIN_SUCCESS = \"handrangeAPI/Auth/USER_SIGNIN_SUCCESS\";\nexport const USER_SIGNIN_FAIL = \"handrangeAPI/Auth/USER_SIGNIN_FAIL\";\n\nexport const USER_SIGNOUT = \"handrangeAPI/Auth/USER_SIGNOUT\";\nexport const USER_SIGNOUT_SUCCESS = \"handrangeAPI/Auth/USER_SIGNOUT_SUCCESS\";\nexport const USER_SIGNOUT_FAIL = \"handrangeAPI/Auth/USER_SIGNOUT_FAIL\";\n\nexport const USER_REQUESTED = \"handrangeAPI/Auth/USER_REQUESTED\";\nexport const USER_LOADED = \"handrangeAPI/Auth/USER_LOADED\";\n\nexport const CLEAR_ERROR_STATE = \"handrangeAPI/Auth/CLEAR_ERROR_STATE\";\nexport const AUTH_CHECK_STATE = \"handrangeAPI/Auth/AUTH_CHECK_STATE\";\n\nexport const INIT_REGISTER_USER = \"handrangeAPI/Auth/INIT_REGISTER_USER\";\nexport const REGISTER_USER_SUCCESS = \"handrangeAPI/Auth/REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAIL = \"handrangeAPI/Auth/REGISTER_USER_FAIL\";\n","import produce from \"immer\";\nimport {\n  USER_SIGNIN,\n  USER_SIGNIN_SUCCESS,\n  USER_SIGNIN_FAIL,\n  CLEAR_ERROR_STATE,\n  USER_LOADED,\n  USER_SIGNOUT_SUCCESS,\n  INIT_REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL\n} from \"./constants\";\n\nexport const initialState = {\n  loading: false,\n  error: { invalid: false, message: null },\n  email: false,\n  name: false,\n  token: null,\n  id: false\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst authReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case USER_SIGNIN:\n        draft.loading = true;\n        draft.data = false;\n        draft.token = null;\n        draft.error.invalid = false;\n        draft.error.message = null;\n        break;\n\n      case USER_SIGNIN_SUCCESS:\n        draft.loading = false;\n        draft.token = action.token;\n        break;\n\n      case USER_LOADED:\n        console.log(action.user);\n        draft.email = action.user.email;\n        draft.name = action.user.name;\n        draft.id = action.user.id;\n        break;\n\n      case USER_SIGNIN_FAIL:\n        draft.loading = false;\n        draft.error.invalid = true;\n        draft.error.message = action.error;\n        break;\n\n      case CLEAR_ERROR_STATE:\n        draft.error.invalid = false;\n        draft.error.message = null;\n        break;\n\n      case USER_SIGNOUT_SUCCESS:\n        draft.data = false;\n        draft.token = null;\n        break;\n\n      case INIT_REGISTER_USER:\n        draft.loading = true;\n        draft.params = action.user;\n        break;\n\n      case REGISTER_USER_SUCCESS:\n        draft.loading = false;\n        break;\n\n      case REGISTER_USER_FAIL:\n        draft.loading = false;\n        draft.error.invalid = true;\n        draft.error.message = action.error;\n        break;\n    }\n  });\n\nexport default authReducer;\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport history from \"./utils/history\";\nimport globalReducer from \"./containers/MainPage/reducer\";\nimport authReducer from \"./containers/Auth/reducer\";\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    user: authReducer,\n    router: connectRouter(history),\n    ...injectedReducers\n  });\n\n  return rootReducer;\n} //?\n","import invariant from \"invariant\";\nimport { isEmpty, isFunction, isString } from \"lodash\";\n\nimport checkStore from \"./checkStore\";\nimport createReducer from \"../reducers\";\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\"\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}\n","import React from \"react\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { ReactReduxContext } from \"react-redux\";\n\nimport getInjectors from \"./reducerInjectors\";\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      \"Component\"})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };\n","import React, { Fragment, useState, useEffect, memo } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { Header, Table, Tab, Button } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport useInjectReducer from \"../../../HOC/useInjectReducer\";\n\nimport reducer from \"../reducer\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { makeSelectDeadcards, makeSelectMode } from \"../selectors\";\n\nconst key = \"global\";\n\nconst StyledContainer = styled(Container)`\n  font-size: 1rem;\n`;\n\nconst StyledGreenRow = styled(Table.Row)`\n  color: black;\n  background-color: #8bddbe;\n`;\n\nconst StyledVioletRow = styled(Table.Row)`\n  color: black;\n  background-color: #ed87a7;\n`;\n\nconst StyledBlueRow = styled(Table.Row)`\n  color: black;\n  background-color: #6b6c7c;\n`;\n\nconst StyledRedRow = styled(Table.Row)`\n  color: black;\n  background-color: #d3d3d3;\n`;\n\nconst StyledInvertedHeader = styled(Table.Header)`\n  color: white;\n  background-color: black;\n`;\nconst StyledInvertedRow = styled(Table.Row)`\n  color: white;\n  background-color: black;\n`;\n//TODO: Make a board legend for Preflop/Flop/Turn/River\n\nconst legendTable = (\n  numberOfCombos,\n  nameOfAction,\n  onHandleStreetHandlerButtons,\n  street,\n  streetActions\n) => (\n  <Table>\n    <StyledInvertedHeader>\n      <Table.Row>\n        <Table.HeaderCell>Name</Table.HeaderCell>\n        <Table.HeaderCell>Range # Combos</Table.HeaderCell>\n        <Table.HeaderCell>% of Range</Table.HeaderCell>\n        <Table.HeaderCell>% of Hands</Table.HeaderCell>\n      </Table.Row>\n    </StyledInvertedHeader>\n    <Table.Body>\n      <StyledGreenRow>\n        <Table.Cell>{streetActions[0]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[0]}</Table.Cell>\n        <Table.Cell id=\"Raise4BetValueTutorial\">\n          {(\n            (100 * numberOfCombos[0]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[0] / 1326) * 100).toFixed(2)}</Table.Cell>\n        <Table.Cell>\n          <Button\n            id=\"firstChoice\"\n            onClick={(e) =>\n              onHandleStreetHandlerButtons(e, {\n                street,\n                streetAction: streetActions[0],\n              })\n            }\n          >\n            Choose Hands\n          </Button>\n        </Table.Cell>\n      </StyledGreenRow>\n      <StyledVioletRow>\n        <Table.Cell>{streetActions[1]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[1]}</Table.Cell>\n        <Table.Cell id=\"Raise4BetBluffTutorial\">\n          {(\n            (100 * numberOfCombos[1]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[1] / 1326) * 100).toFixed(2)}</Table.Cell>\n        <Table.Cell>\n          <Button\n            id=\"secondChoice\"\n            onClick={(e) =>\n              onHandleStreetHandlerButtons(e, {\n                street,\n                streetAction: streetActions[1],\n              })\n            }\n          >\n            Choose Hands\n          </Button>\n        </Table.Cell>\n      </StyledVioletRow>\n      <StyledBlueRow>\n        <Table.Cell>{streetActions[2]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[2]}</Table.Cell>\n        <Table.Cell>\n          {(\n            (100 * numberOfCombos[2]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[2] / 1326) * 100).toFixed(2)}</Table.Cell>\n        <Table.Cell>\n          <Button\n            id=\"thirdChoice\"\n            onClick={(e) =>\n              onHandleStreetHandlerButtons(e, {\n                street,\n                streetAction: streetActions[2],\n              })\n            }\n          >\n            Choose Hands\n          </Button>\n        </Table.Cell>\n      </StyledBlueRow>\n      <StyledRedRow>\n        <Table.Cell>{streetActions[3]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[3]}</Table.Cell>\n        <Table.Cell>\n          {(\n            (100 * numberOfCombos[3]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[3] / 1326) * 100).toFixed(2)}</Table.Cell>\n        <Table.Cell>\n          <Button\n            id=\"fourthChoice\"\n            onClick={(e) =>\n              onHandleStreetHandlerButtons(e, {\n                street,\n                streetAction: streetActions[3],\n              })\n            }\n          >\n            Choose Hands\n          </Button>\n        </Table.Cell>\n      </StyledRedRow>\n      <StyledInvertedRow>\n        <Table.Cell>Total</Table.Cell>\n        <Table.Cell>\n          {numberOfCombos[0] +\n            numberOfCombos[1] +\n            numberOfCombos[2] +\n            numberOfCombos[3]}\n        </Table.Cell>\n        <Table.Cell></Table.Cell>\n        <Table.Cell>\n          {(\n            (100 *\n              (numberOfCombos[0] +\n                numberOfCombos[1] +\n                numberOfCombos[2] +\n                numberOfCombos[3])) /\n            1326\n          ).toFixed(2)}\n        </Table.Cell>\n      </StyledInvertedRow>\n    </Table.Body>\n  </Table>\n);\n\nconst comboCounter = (hand, chosenStreet, board) => {\n  let filteredBoard = [];\n  if (chosenStreet == \"Flop\" && board.length >= 3)\n    filteredBoard = [board[0].trim(), board[1].trim(), board[2].trim()];\n  else if (chosenStreet == \"Turn\" && board.length >= 4)\n    filteredBoard = [\n      board[0].trim(),\n      board[1].trim(),\n      board[2].trim(),\n      board[3].trim(),\n    ];\n  else if (chosenStreet == \"River\" && board.length >= 5)\n    filteredBoard = [\n      board[0].trim(),\n      board[1].trim(),\n      board[2].trim(),\n      board[3].trim(),\n      board[4].trim(),\n    ];\n  if (hand.indexOf(\"s\") >= 0) {\n    let filteredBoardCards = filteredBoard.map((boardCard) =>\n      boardCard.charAt(0)\n    );\n    let specificHands = [\n      hand.charAt(0) + \"s\" + hand.charAt(1) + \"s\",\n      hand.charAt(0) + \"c\" + hand.charAt(1) + \"c\",\n      hand.charAt(0) + \"d\" + hand.charAt(1) + \"d\",\n      hand.charAt(0) + \"h\" + hand.charAt(1) + \"h\",\n    ];\n    let addCombos = filteredBoard.reduce((acc, boardCard) => {\n      let totalHands = specificHands.reduce((acc2, specificCards) => {\n        if (specificCards.indexOf(boardCard) >= 0) {\n          return [...acc2, specificCards];\n        } else return acc2;\n      }, [])[0];\n      if (totalHands) return { ...acc, [totalHands]: \"\" };\n      else return { ...acc };\n    }, 0);\n    return 4 - Object.keys(addCombos).length;\n  }\n  //Suited Combos\n  else if (hand.indexOf(\"o\") >= 0) {\n    let numOccurances = _.countBy(_.split(board, \"\", 12));\n    let subtractFirstCard = numOccurances[hand.charAt(0)] || 0;\n    let subtractSecondCard = numOccurances[hand.charAt(1)] || 0;\n    let numCards = (4 - subtractFirstCard) * (4 - subtractSecondCard) - 4;\n    return numCards;\n  }\n  //Offsuit Combos\n  else {\n    let numOccurances = _.countBy(_.split(board, \"\", 12));\n    let subtractFirstCard = numOccurances[hand.charAt(0)] || 0;\n    let subtractSecondCard = numOccurances[hand.charAt(1)] || 0;\n\n    let numCards = ((4 - subtractFirstCard) * (3 - subtractSecondCard)) / 2;\n    return numCards; //Pair Combos\n  }\n};\n\nexport const countHandCombo = (wholeRange, chosenStreet, board) => {\n  let wholeRangeFiltered = wholeRange.filter(\n    ({ hands, Street }) => chosenStreet == Street\n  );\n  let wholeRangeNum = wholeRangeFiltered.map(({ hands }) => {\n    return hands.reduce((acc, hand) => {\n      return acc + comboCounter(hand, chosenStreet, board);\n    }, 0);\n  });\n  return wholeRangeNum;\n};\n\nconst BoardLegend = ({\n  wholeRange,\n  onHandleStreetHandler,\n  onHandleStreetHandlerButtons,\n  mode,\n  deadcards,\n}) => {\n  useInjectReducer({ key, reducer });\n  const streetActions = {\n    Preflop: [\"Raise4BetCall\", \"Raise4BetFold\", \"RaiseCall\", \"RaiseFold\"],\n    Flop: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"],\n    Turn: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"],\n    River: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"],\n  };\n\n  console.log(mode.street);\n  const [numberOfCombos, updateNumberOfCombos] = useState([0, 0, 0, 0]);\n\n  //TODO: potential bug? method outside useEffect\n  useEffect(() => {\n    updateNumberOfCombos(countHandCombo(wholeRange, mode.street, deadcards));\n  }, [wholeRange, mode.street, deadcards]);\n\n  const panes = [\n    {\n      menuItem: \"Preflop\",\n      name: \"Preflop\",\n      value: \"Raise4BetCall\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}{\" \"}\n        </Fragment>\n      ),\n    },\n    {\n      menuItem: \"Flop\",\n      name: \"Flop\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      ),\n    },\n    {\n      menuItem: \"Turn\",\n      name: \"Turn\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      ),\n    },\n    {\n      menuItem: \"River\",\n      name: \"River\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      ),\n    },\n  ];\n  const nameOfAction = (comboNumber) => {\n    if (mode.street && wholeRange[mode.street] !== undefined)\n      return Object.keys(wholeRange[mode.street])[comboNumber];\n    else return \"\";\n  };\n\n  return (\n    <StyledContainer>\n      <Tab\n        panes={panes}\n        menu={{ fluid: true, tabular: true }}\n        onTabChange={onHandleStreetHandler}\n      />\n    </StyledContainer>\n  );\n};\n\nconst mapStateToProps = () => {\n  const getDeadcards = makeSelectDeadcards();\n  const getMode = makeSelectMode();\n\n  const mapState = (state) => {\n    return {\n      deadcards: getDeadcards(state),\n      mode: getMode(state),\n    };\n  };\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\nexport default compose(withConnect, memo)(BoardLegend);\n","export const RESTART_ON_REMOUNT = \"@@saga-injector/restart-on-remount\";\nexport const DAEMON = \"@@saga-injector/daemon\";\nexport const ONCE_TILL_UNMOUNT = \"@@saga-injector/once-till-unmount\";\n","import invariant from \"invariant\";\nimport { isEmpty, isFunction, isString, conformsTo } from \"lodash\";\n\nimport checkStore from \"./checkStore\";\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from \"./constants\";\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    \"(app/utils...) injectSaga: Expected `key` to be a non empty string\"\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode)\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    \"(app/utils...) injectSaga: Expected a valid saga descriptor\"\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args)\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === \"production\") {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = \"done\"; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n","import React from \"react\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { ReactReduxContext } from \"react-redux\";\n\nimport getInjectors from \"./sagaInjectors\";\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      \"Component\"})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import { call, put, all, takeLatest, cancelled } from \"redux-saga/effects\";\nimport qs from \"qs\";\n\nimport { INIT_ALL_USER_HAND_RANGES, INIT_CREATE_NEW_FOLDER } from \"./constants\";\nimport {\n  createNewFolderSuccess,\n  createNewFolderFail,\n  allUserHandRangesSuccess,\n  allUserHandRangesFail\n} from \"./actions\";\nimport request from \"../../utils/request\";\nimport { INIT_REGISTER_USER } from \"../Auth/constants\";\n\nlet baseURL;\n\nif (process.env.NODE_ENV !== \"production\")\n  baseURL = `${process.env.REACT_APP_API_URL}`;\nelse baseURL = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\n/**\n * Get All Hand Ranges request/response handler\n */\nexport function* getAllHandRanges() {\n  const requestUrl = `${baseURL}/hand_ranges/show_user_id/2`;\n\n  try {\n    //yield call/put/cancelled APICALL\n    const allRanges = yield call(request, requestUrl);\n    yield put(allUserHandRangesSuccess(allRanges));\n  } catch (err) {\n    //yield errorHandling\n    yield put(allUserHandRangesFail(err));\n  }\n}\n\n/**\n * Register User request/response handler\n */\nexport function* registerUser(params) {\n  const requestUrl = `${baseURL}/hand_ranges/user_id/1`;\n\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  const body = JSON.stringify({\n    params: params.data\n  });\n\n  const requestParams = {\n    body,\n    headers,\n    method: \"POST\"\n  };\n\n  try {\n    //yield call/put/cancelled APICALL\n    const allRanges = yield call(request, requestUrl, requestParams);\n  } catch (err) {\n    //yield errorHandling\n    console.log(err);\n  }\n}\n\n/**\n * Create New Folder request/response handler\n */\nexport function* createNewFolder(params) {\n  //FIXME: Hardcoded the user_id, folder_name, need to add those as parameters\n  const requestUrl = `${baseURL}/hand_ranges/`;\n\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  const body = JSON.stringify({\n    user_id: 2,\n    folder_name: \"Folder 3\"\n  });\n\n  const requestParams = {\n    body,\n    headers,\n    method: \"POST\"\n  };\n\n  try {\n    //yield call/put/cancelled APICALL\n    const allRanges = yield call(request, requestUrl, requestParams);\n    yield put(createNewFolderSuccess(allRanges));\n  } catch (err) {\n    yield put(createNewFolderFail(err));\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* handData() {\n  yield all([takeLatest(INIT_ALL_USER_HAND_RANGES, getAllHandRanges)]);\n  yield all([takeLatest(INIT_REGISTER_USER, registerUser)]);\n  yield all([takeLatest(INIT_CREATE_NEW_FOLDER, createNewFolder)]);\n}\n","import React, { Fragment } from \"react\";\n\nconst ProductDescription = () => {\n  return (\n    <Fragment>\n      <h2>Hand Range Display Application</h2>\n      <p>\n        This application allows you to track what hands you are playing from\n        different positions in Texas Holdem Poker. Click a street on the left,\n        and then select a betting pattern. For example, you could select flop,\n        then Valuebet, Bluff, Check Fold, or Check Call.\n      </p>\n      <p>\n        You can then select different hands to fit into your poker hand range.\n        Once you have completed filling out the hand ranges you can then look at\n        the legend to see how your range is divided between the different\n        actions.\n      </p>\n    </Fragment>\n  );\n};\n\nexport default ProductDescription;\n","import React, { Fragment, useState } from \"react\";\nimport { Row, Container, Button } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  setDynamicFolderInfo,\n  saveAndLoad,\n  loadNewFolder,\n  setHandRangeSelect\n} from \"../../actions.js\";\n\nconst StyledContainer = styled(Container)`\n  display: block;\n`;\n\nconst StyledRow = styled(Row)`\n  &&& {\n    display: flex;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  &&& {\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    width: 200px;\n    background-color: ${props => (props.isactive ? \"#777\" : \"#CCC\")};\n    color: ${props => (props.isactive ? \"#CCC\" : \"#000\")};\n  }\n`;\n\nconst HandRangeContainer = ({ id, folderName, folderGroupName }) => {\n  const dispatch = useDispatch();\n  const [activeIndex, updateActiveIndex] = useState(\"UTG\");\n\n  const onClickHandler = (e, data) => {\n    updateActiveIndex(e.target.name);\n    dispatch(\n      setDynamicFolderInfo({\n        folderID: folderName,\n        folderSubgroupName: folderGroupName,\n        folderSubgroupRangeName: e.target.name\n      })\n    );\n    dispatch(\n      setHandRangeSelect({\n        name: \"Preflop\",\n        value: \"Raise4BetCall\",\n        newFolder: true\n      })\n    );\n  };\n  return (\n    <StyledContainer id={id}>\n      {id === \"OpeningRanges\" ? (\n        <StyledRow>\n          <StyledButton\n            onClick={onClickHandler}\n            isactive={activeIndex === \"UTG\"}\n            name=\"UTG\"\n          >\n            Under The Gun\n          </StyledButton>\n        </StyledRow>\n      ) : null}\n      <StyledRow>\n        <StyledButton\n          onClick={onClickHandler}\n          isactive={activeIndex === \"MP\"}\n          name=\"MP\"\n        >\n          Middle Position\n        </StyledButton>\n      </StyledRow>\n      <StyledRow>\n        <StyledButton\n          onClick={onClickHandler}\n          isactive={activeIndex === \"CO\"}\n          name=\"CO\"\n        >\n          Cutoff\n        </StyledButton>\n      </StyledRow>\n      <StyledRow>\n        <StyledButton\n          onClick={onClickHandler}\n          isactive={activeIndex === \"BU\"}\n          name=\"BU\"\n        >\n          Button\n        </StyledButton>\n      </StyledRow>\n      <StyledRow>\n        <StyledButton\n          onClick={onClickHandler}\n          isactive={activeIndex === \"SB\"}\n          name=\"SB\"\n        >\n          Small Blind\n        </StyledButton>\n      </StyledRow>\n      {id === \"DefendingRanges\" ? (\n        <StyledRow>\n          <StyledButton\n            onClick={onClickHandler}\n            isactive={activeIndex === \"BB\"}\n            name=\"BB\"\n          >\n            Big Blind\n          </StyledButton>\n        </StyledRow>\n      ) : null}\n    </StyledContainer>\n  );\n};\n\nexport default HandRangeContainer;\n","import React, { useState, memo, useEffect } from \"react\";\nimport { Form, Input, Tab, Button } from \"semantic-ui-react\";\n\nimport { connect, useDispatch } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { makeSelectFolder, makeSelectFolderGroup } from \"../../selectors.js\";\n\nimport {\n  setDynamicFolderInfo,\n  saveAndLoad,\n  loadNewFolder,\n  setHandRangeSelect\n} from \"../../actions.js\";\n\nimport HandRangeContainer from \"./HandRangeContainer.js\";\n\nconst panes = (FolderGroup, folderIdx, folderName) =>\n  FolderGroup.map((curr, idx) => {\n    return {\n      menuItem: curr,\n      render: () => (\n        <HandRangeContainer\n          id={idx === 0 ? \"OpeningRanges\" : \"DefendingRanges\"}\n          folderName={folderName}\n          folderGroupName={curr}\n        />\n      ) //FIXME: hardcoded, for now\n    };\n  });\n\nconst FolderGroup = ({ FolderGroup, folderIdx = 0, folderName }) => {\n  const dispatch = useDispatch();\n  const [activeIndex, updateActiveIndex] = useState();\n\n  const [rangeRFI, updateRangeRFI] = useState({\n    \"Opening Ranges\": {\n      UTG: 0,\n      MP: 0,\n      CO: 0,\n      BU: 0,\n      SB: 0\n    },\n    \"Defending Ranges\": {\n      MP: 0,\n      CO: 0,\n      BU: 0,\n      SB: 0,\n      BB: 0\n    }\n  });\n\n  const onChangeHandler = (e, { activeIndex, panes }) => {\n    dispatch(saveAndLoad());\n    dispatch(\n      setDynamicFolderInfo({\n        folderID: folderName,\n        folderSubgroupName: panes[activeIndex].menuItem,\n        folderSubgroupRangeName: \"UTG\"\n      })\n    ); //FIXME: Hardcoded for now\n    dispatch(loadNewFolder());\n    dispatch(\n      setHandRangeSelect({\n        name: \"Preflop\",\n        value: \"Raise4BetCall\",\n        newFolder: true\n      })\n    );\n  };\n\n  return (\n    <Tab\n      data-test=\"folder-group\"\n      panes={panes(FolderGroup, folderIdx, folderName)}\n      menu={{ fluid: true, vertical: true, tabular: true }}\n      onTabChange={onChangeHandler}\n    />\n  );\n};\n\nconst mapStateToProps = () => {\n  const getFolderGroup = makeSelectFolderGroup();\n\n  const mapState = state => {\n    return {\n      FolderGroup: getFolderGroup(state)\n    };\n  };\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(FolderGroup);\n","import React, { Fragment, useState, memo } from \"react\";\nimport { Form, Radio, Tab, Input } from \"semantic-ui-react\";\nimport FolderGroup from \"./FolderGroup\";\n\nimport { connect, useDispatch } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { makeSelectFolder } from \"../selectors.js\";\nimport {\n  setDynamicFolderInfo,\n  saveAndLoad,\n  loadNewFolder,\n  setHandRangeSelect\n} from \"../actions\";\n\n//FIXME: This bugs out on no login\nconst panes = Folder =>\n  Folder.map((curr, idx) => {\n    return {\n      menuItem: curr,\n      render: () => <FolderGroup folderIdx={idx} folderName={curr} />\n    };\n  });\n\nconst UserFunctionality = ({ Folder }) => {\n  const dispatch = useDispatch();\n  const onChangeHandler = (e, { activeIndex, panes }) => {\n    dispatch(\n      setDynamicFolderInfo({\n        folderID: panes[activeIndex].menuItem,\n        folderSubgroupName: \"Opening Ranges\",\n        folderSubgroupRangeName: \"UTG\"\n      })\n    ); //TODO: Hardcoded for now\n    dispatch(\n      setHandRangeSelect({\n        name: \"Preflop\",\n        value: \"Raise4BetCall\",\n        newFolder: true\n      })\n    );\n  };\n\n  return (\n    <Form>\n      <Tab panes={panes(Folder)} onTabChange={onChangeHandler} />\n    </Form>\n  );\n};\n\nconst mapStateToProps = () => {\n  const getFolder = makeSelectFolder();\n  const mapState = state => {\n    return {\n      Folder: getFolder(state)\n    };\n  };\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(UserFunctionality);\n","import React, { Fragment, useEffect, useState, memo } from \"react\";\nimport { Button, Container, Table } from \"semantic-ui-react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport styled from \"styled-components\";\nimport { makeSelectDeadcards } from \"../selectors\";\n\nconst styledCardBack = styled.img``;\n\nconst StyledCol = styled(Col)`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoardCard = (displayCard, idx) => (\n  <img id={\"Board\" + idx + \"Card\"} alt=\"first card\" src={displayCard} />\n);\n\nconst StyledRow = styled(Row)`\n  width: 80%;\n`;\n//TODO: buttons that add two tone/rainbow/monotone/paired/HLL/etc.\nconst BoardCards = ({ deadcards = [] }) => {\n  return (\n    <Table>\n      <StyledRow>\n        <Col xs={8} md={8} lg={8} className=\"text-center\">\n          <h4>Flop</h4>\n        </Col>\n        <Col xs={2} md={2} lg={2} className=\"text-center\">\n          <h4>Turn</h4>\n        </Col>\n        <Col xs={2} md={2} lg={2} className=\"text-center\">\n          <h4>River</h4>\n        </Col>\n      </StyledRow>\n      <StyledRow>\n        <StyledCol xs={8} md={8} lg={8}>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 0 &&\n          deadcards[0].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[0].toUpperCase().trim() + \".png\",\n                0\n              )\n            : BoardCard(\"/assets/cards/back.png\", 0)}\n\n          {Array.isArray(deadcards) &&\n          deadcards.length > 1 &&\n          deadcards[1].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[1].toUpperCase().trim() + \".png\",\n                1\n              )\n            : BoardCard(\"/assets/cards/back.png\", 1)}\n\n          {Array.isArray(deadcards) &&\n          deadcards.length > 2 &&\n          deadcards[2].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[2].toUpperCase().trim() + \".png\",\n                2\n              )\n            : BoardCard(\"/assets/cards/back.png\", 2)}\n        </StyledCol>\n        <StyledCol xs={2} md={2} lg={2}>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 3 &&\n          deadcards[3].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[3].toUpperCase().trim() + \".png\",\n                3\n              )\n            : BoardCard(\"/assets/cards/back.png\", 3)}\n        </StyledCol>\n        <StyledCol xs={2} md={2} lg={2}>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 4 &&\n          deadcards[4].length > 1\n            ? BoardCard(\"/assets/cards/\" + deadcards[4] + \".png\", 4)\n            : BoardCard(\"/assets/cards/back.png\", 4)}\n        </StyledCol>\n      </StyledRow>\n    </Table>\n  );\n};\n\nconst mapStateToProps = () => {\n  const getDeadcards = makeSelectDeadcards();\n\n  const mapState = state => {\n    return {\n      deadcards: getDeadcards(state)\n    };\n  };\n  return mapState;\n}; //?\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(BoardCards);\n","import React, { Fragment, useState, memo } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport BoardCards from \"./BoardCards\";\nimport { setDeadCards } from \"../actions\";\nimport { compose } from \"redux\";\nimport { connect, useDispatch } from \"react-redux\";\nimport _ from \"lodash\";\n\nconst DeadCards = styled(Form.Input)`\n  width: 100%;\n`;\n// TODO: Add functionality to assign, ranges, clear selection, clear suits, split suits\nconst InputForm = ({\n  onHandleStreetHandler,\n  onHandleStreetHandlerButtons,\n  mode\n}) => {\n  const dispatch = useDispatch();\n  const onChangeStreetHandler = e =>\n    dispatch(setDeadCards(_.split(e.target.value, \",\", 12)));\n\n  return (\n    <Fragment>\n      <DeadCards\n        label=\"Dead Cards\"\n        placeholder=\"Enter dead cards, for example Ah, As, 2c\"\n        name=\"deadcards\"\n        onChange={onChangeStreetHandler}\n      ></DeadCards>\n      <BoardCards />\n    </Fragment>\n  );\n};\nconst withConnect = connect(null, null);\nexport default compose(withConnect, memo)(InputForm);\n","import React, { useState, useEffect, memo, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport Board from \"./Board\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport prange from \"prange\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport BoardLegend from \"./BoardLegend/BoardLegend\";\nimport {\n  makeSelectRanges,\n  makeSelectRange,\n  makeSelectMode,\n  makeSelectUser,\n  makeSelectFolder,\n  makeSelectDeadcards,\n} from \"./selectors\";\nimport {\n  initCreateNewFolder,\n  setHandRangeSelect,\n  setHandRange,\n  initAllUserHandRanges,\n} from \"./actions\";\n\nimport reducer from \"./reducer\";\nimport { useInjectReducer } from \"../../HOC/useInjectReducer\";\nimport { useInjectSaga } from \"../../HOC/injectSaga\";\nimport saga from \"./saga\";\n\nimport ProductDescription from \"./ProductDescription/index\";\nimport UserFunctionality from \"./UserFunctionality/index\";\n\nimport { Button } from \"semantic-ui-react\";\nimport InputForm from \"./InputForm\";\nimport styled from \"styled-components\";\n\nimport { mapNewHandRange } from \"./stateRangeFunctions\";\n\nconst MainPageContainer = styled.div`\n  display: flex;\n`;\n\nconst LeftPane = styled.div`\n  margin: 25px;\n`;\n\nconst RightPane = styled.div`\n  margin: 25px;\n`;\n\nconst key = \"global\";\n//TO-DO: Rounded corners on navigation bar, spaces on buttons, more whitespace, needs instructions\n\nconst MainPage = ({\n  wholeRange,\n  ranges,\n  mode,\n  rangeColors,\n  user,\n  toAllUserHandRange,\n  mode: { street, streetAction },\n  board,\n}) => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    toAllUserHandRange();\n  }, [toAllUserHandRange]);\n\n  const onHandleStreetHandler = (e, { activeIndex, panes }) => {\n    dispatch(\n      setHandRangeSelect({\n        name: panes[activeIndex].name,\n        value: panes[activeIndex].value,\n      })\n    );\n  };\n\n  const onHandleStreetHandlerButtons = (e, { street, streetAction }) => {\n    dispatch(setHandRangeSelect({ name: street, value: streetAction }));\n  };\n\n  const onMouseOverHandler = (data) => {\n    if (data.onMouseDownEvent) {\n      let newHandRange = mapNewHandRange(\n        wholeRange,\n        street,\n        streetAction,\n        data.cards\n      );\n      dispatch(setHandRange(newHandRange));\n    }\n    return data.cards;\n  };\n\n  const onTabChangeHandler = (e, { activeIndex }) => {\n    dispatch(initAllUserHandRanges(activeIndex));\n  };\n\n  const onClickNewFolderHandler = () => {\n    dispatch(initCreateNewFolder(user));\n  };\n\n  //TO-DO: need to align these left-to-right on big screens, top-to-bottom mobile\n  return (\n    <MainPageContainer>\n      <LeftPane>\n        <InputForm\n          onHandleStreetHandler={onHandleStreetHandler}\n          onHandleStreetHandlerButtons={onHandleStreetHandlerButtons}\n          mode={mode}\n        />\n        <Board\n          onMouseOverHandler={onMouseOverHandler}\n          rangeColors={rangeColors}\n        ></Board>\n      </LeftPane>\n      <RightPane>\n        <ProductDescription />\n        <BoardLegend\n          wholeRange={wholeRange}\n          onHandleStreetHandler={onHandleStreetHandler}\n          onHandleStreetHandlerButtons={onHandleStreetHandlerButtons}\n          mode={mode}\n        />\n        {/* <UserFunctionality onTabChangeHandler={onTabChangeHandler} /> */}\n        {/* <Button onClick={onClickNewFolderHandler}>Create New Folder </Button> */}\n      </RightPane>\n    </MainPageContainer>\n  );\n};\nMainPage.propTypes = {\n  ranges: PropTypes.object,\n  mode: PropTypes.object,\n  rangeColors: PropTypes.object,\n};\n\nconst mapStateToProps = () => {\n  const getMapRange = makeSelectRanges();\n  const getSelectRange = makeSelectRange();\n  const getMode = makeSelectMode();\n  const getUser = makeSelectUser();\n  const getDeadcards = makeSelectDeadcards();\n\n  const mapState = (state) => {\n    return {\n      ranges: getMapRange(state),\n      wholeRange: getSelectRange(state), //TODO: change to streetname\n      mode: getMode(state),\n      user: getUser(state),\n      board: getDeadcards(state),\n    };\n  };\n  return mapState;\n}; //?\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toAllUserHandRange: () => dispatch(initAllUserHandRanges()),\n  };\n};\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect, memo)(MainPage);\n","import React, { Fragment } from \"react\";\n\nimport { Menu, Item, Button } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Navbar = ({ username = false }) => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  return (\n    <Menu inverted>\n      <Menu.Item>\n        <NavLink to=\"/\">Home</NavLink>\n      </Menu.Item>\n      {isAuthenticated != false ? (\n        <Fragment>\n          <Menu.Item>{username ? username : \"\"}</Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/donate\">Donate</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <Button onClick={() => logout()}>Logout</Button>\n          </Menu.Item>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Menu.Item>\n            <NavLink to=\"/register\">Register</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <Button onClick={() => loginWithRedirect()}>Login</Button>\n          </Menu.Item>\n        </Fragment>\n      )}\n    </Menu>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\n\nconst StyledContainer = styled(Container)`\n  margin-top: 30px;\n  margin-bottom: 50px;\n  width: 1400px;\n  background-color: #8a94a333;\n`;\n\nconst MainContainer = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n\nexport default MainContainer;\n","import React, { useEffect, useState, useRef, Fragment, memo } from \"react\";\nimport \"./App.css\";\nimport MainPage from \"../MainPage/index\";\n// import { useStripe } from \"../../HOC/useStripe/useStripe\";\n// import { StripeProvider, Elements } from \"react-stripe-elements\";\nimport { BrowserRouter, Route, NavLink, Switch } from \"react-router-dom\";\nimport { Menu } from \"semantic-ui-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInjectReducer } from \"../../HOC/useInjectReducer\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  makeSelectRanges,\n  makeSelectMode,\n  makeSelectUser,\n} from \"../MainPage/selectors\";\n\nimport styled from \"styled-components\";\n\nimport reducer from \"../MainPage/reducer\";\nimport Navbar from \"../../components/NavBar\";\nimport MainContainer from \"../../components/MainContainer\";\n\nimport Tour from \"reactour\";\n\nconst key = \"global\";\n\nconst StyledFragment = styled.div`\n  background-color: #e2e3e6;\n`;\nconst steps = [\n  {\n    selector: \"button#firstChoice\",\n    content:\n      \"First pick your betting pattern, Raise/4Bet/Call, in this case you will select your strongest hands that you always raise with. Note: you may have to click back and forth to get the right button highlighted. \",\n  },\n  {\n    selector: \"button#colorButtonAA\",\n    content:\n      \"AA is by far the strongest hand in holdem, select this hand by turning the table column green to go in your strongest hand range \",\n  },\n  {\n    selector: \"button#secondChoice\",\n    content:\n      \"Next we are going to take one of our strongest hands and turn it into a bluff when someone raises us. Select Raise4BetFold next. \",\n  },\n  {\n    selector: \"button#colorButtonAQo\",\n    content:\n      \"AQo makes the perfect bluffing hand. Its strong enough to raise first in, and has cards that block the strongest hands in the game. Go ahead and select AQo.\",\n  },\n  {\n    selector: \"#Raise4BetValueTutorial\",\n    content:\n      \"How often are we bluffing raising just AA and AQo? Looks like we valuebet with aces 33% of the time!\",\n  },\n  {\n    selector: \"#Raise4BetBluffTutorial\",\n    content:\n      \"How often are we bluffing raising just AA and AQo? Looks like we bluff twice as often at 67% as much as we valuebet. This ratio is much too high, we should now add kings and AKs to our range to balance our range.\",\n  },\n  {\n    selector: \"button#firstChoice\",\n    content:\n      \"We better put more hands into our value range, so lets go ahead and select Raise4BetCall again. \",\n  },\n  {\n    selector: \"button#colorButtonKK , button#colorButtonAKs\",\n    content:\n      \"You can click and drag now to select the two hands, KK and AKs, to balance out your range.\",\n  },\n  {\n    selector: \"#Raise4BetBluffTutorial\",\n    content:\n      \"This is fantastic, now we are only bluffing approximately less than half the time! If someone tries to rebluff our raise back at them, they will be greeted with an allin against a very strong hand much too often for this to be a profitable move\",\n  },\n];\nconst App = ({ ranges, mode, user, rangeColors }) => {\n  useInjectReducer({ key, reducer });\n  // const [stripe, setStripe] = useState(null);\n  const username = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [isTourOpen, updateTourOpen] = useState(true);\n\n  const closeTour = () => updateTourOpen(false);\n\n  return (\n    <StyledFragment>\n      <MainContainer>\n        <Navbar username={user.name} />\n        <MainPage ranges={ranges} mode={mode}></MainPage>\n        <Tour steps={steps} isOpen={isTourOpen} onRequestClose={closeTour} />\n      </MainContainer>\n    </StyledFragment>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  ranges: makeSelectRanges(),\n  mode: makeSelectMode(),\n  user: makeSelectUser(),\n}); //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (error) {\n    // Ignore write errors\n  }\n};\n","/*\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport {\n  USER_SIGNIN,\n  USER_SIGNIN_SUCCESS,\n  USER_SIGNIN_FAIL,\n  CLEAR_ERROR_STATE,\n  USER_SIGNOUT,\n  USER_SIGNOUT_SUCCESS,\n  USER_REQUESTED,\n  USER_LOADED,\n  AUTH_CHECK_STATE,\n  USER_SIGNUP,\n  USER_SIGNUP_SUCCESS,\n  USER_SIGNUP_FAIL,\n  INIT_REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL\n} from \"./constants\";\n\nexport function userSignin(user) {\n  return {\n    type: USER_SIGNIN,\n    user\n  };\n}\n\nexport function userSigninSuccess(token) {\n  return {\n    type: USER_SIGNIN_SUCCESS,\n    token\n  };\n}\n\nexport function userSigninFail(error) {\n  return {\n    type: USER_SIGNIN_FAIL,\n    error\n  };\n}\n\nexport function requestUser(userid) {\n  return {\n    type: USER_REQUESTED,\n    userid\n  };\n}\n\nexport function userLoaded(user) {\n  return {\n    type: USER_LOADED,\n    user\n  };\n}\n\nexport function logout() {\n  return {\n    type: USER_SIGNOUT\n  };\n}\n\nexport function logoutSuccess() {\n  return {\n    type: USER_SIGNOUT_SUCCESS\n  };\n}\n\nexport function authCheckState() {\n  return {\n    type: AUTH_CHECK_STATE\n  };\n}\n\nexport function clearErrorState() {\n  return {\n    type: CLEAR_ERROR_STATE\n  };\n}\n\nexport function userSignup(user) {\n  return {\n    type: USER_SIGNUP,\n    user\n  };\n}\n\nexport function userSignupSuccess(user) {\n  return {\n    type: USER_SIGNUP_SUCCESS,\n    user\n  };\n}\n\nexport function userSignupFail(error) {\n  return {\n    type: USER_SIGNUP_FAIL,\n    error\n  };\n}\n\nexport function initRegisterUser(user) {\n  return {\n    type: INIT_REGISTER_USER,\n    user\n  };\n}\n\nexport function RegisterUserSuccess(data) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    data\n  };\n}\n\nexport function RegisterUserFail(data) {\n  return {\n    type: REGISTER_USER_FAIL,\n    data\n  };\n}\n","import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { push } from \"connected-react-router\";\nimport qs from \"qs\";\n\nimport request from \"../../utils/request\";\nimport {\n  USER_SIGNIN,\n  USER_REQUESTED,\n  AUTH_CHECK_STATE,\n  USER_SIGNOUT,\n  USER_SIGNUP,\n  INIT_REGISTER_USER\n} from \"./constants.js\";\nimport {\n  userSigninSuccess,\n  userSigninFail,\n  requestUser,\n  logout,\n  userLoaded,\n  logoutSuccess,\n  userSignupSuccess,\n  userSignupFail,\n  userSignin\n} from \"./actions\";\n\nlet baseURL;\n\nif (process.env.NODE_ENV !== \"production\")\n  baseURL = `${process.env.REACT_APP_API_URL}`;\nelse baseURL = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\nconst stripHtmlTags = str => {\n  if (str === null || str === \"\") return false;\n  str = str.toString();\n  return str.replace(/<[^>]*>/g, \"\");\n};\n\nexport function* logoutSaga() {\n  yield call([localStorage, \"removeItem\"], \"token\");\n  yield put(logoutSuccess());\n  yield put(push(\"/\"));\n}\n\nexport function* authStateSaga({ userid }) {\n  console.log(userid);\n  const requestURL = `${baseURL}/users/${userid}`;\n  const headers = {};\n  const token = yield localStorage.getItem(\"token\");\n\n  if (!token) {\n    yield put(logout());\n  } else {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  try {\n    // Call our request helper (see 'utils/request')\n    const response = yield call(request, requestURL, { headers });\n    yield put(userLoaded(response));\n  } catch (err) {\n    yield put(logout());\n  }\n}\n\nexport function* userSigninSaga({ user: { name, password } }) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const body = JSON.stringify({\n    name,\n    password\n  });\n\n  const requestParams = {\n    body,\n    headers,\n    method: \"POST\"\n  };\n\n  const requestURL = `${baseURL}/login`;\n\n  try {\n    const response = yield call(request, requestURL, requestParams);\n    const { user, token } = response;\n    console.log(user);\n    yield localStorage.setItem(\"token\", token);\n    yield put(requestUser(user.id));\n    yield put(userSigninSuccess(token));\n  } catch (error) {\n    try {\n      const err = yield error.response.json();\n      if (\n        err &&\n        (err.code === \"invalid_email\" ||\n          err.code === \"incorrect_password\" ||\n          err.code === \"invalid_username\")\n      ) {\n        yield put(userSigninFail(\"Wrong username or password.\"));\n      } else {\n        const message = yield stripHtmlTags(err.message);\n        yield put(userSigninFail(message));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nexport function* userSignupSaga({ user }) {\n  const params = qs.stringify(user);\n  const requestURL = `${baseURL}/users?${params}`;\n\n  try {\n    let response = yield call(request, requestURL, { method: \"POST\" });\n    console.log(response);\n    yield put(userSignin(user));\n    yield put(userSigninSuccess(response));\n  } catch (error) {\n    try {\n      const err = yield error.response.json();\n      yield put(userSignupFail(err.message));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* userRoot() {\n  yield all([\n    takeLatest(USER_SIGNIN, userSigninSaga),\n    takeLatest(USER_REQUESTED, authStateSaga),\n    takeLatest(AUTH_CHECK_STATE, authStateSaga),\n    takeLatest(USER_SIGNOUT, logoutSaga),\n    takeLatest(INIT_REGISTER_USER, userSignupSaga)\n  ]);\n}\n","/**\n * The User state selectors\n */\n\nimport { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst selectUser = state => state.user || initialState;\n\nconst selectRouter = state => state.router;\n\nconst makeSelectLoading = () =>\n  createSelector(selectUser, userState => userState.loading);\n\nconst makeSelectError = () =>\n  createSelector(selectUser, userState => userState.error);\n\nconst makeSelectLocation = () =>\n  createSelector(selectRouter, routerState => routerState.location);\n\nconst makeSelectToken = () =>\n  createSelector(selectUser, userState => userState.token);\n\nconst makeSelectUser = () => createSelector(selectUser, userState => userState);\n\nconst makeSelectParams = () =>\n  createSelector(selectUser, userState => userState.params);\n\nexport {\n  selectUser,\n  makeSelectLoading,\n  makeSelectError,\n  makeSelectLocation,\n  makeSelectToken,\n  makeSelectUser,\n  makeSelectParams\n};\n","import React, { useState, memo } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { useDispatch } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport reducer from \"../reducer.js\";\n\nimport saga from \"../saga.js\";\n\nimport { initRegisterUser } from \"../actions.js\";\nimport { makeSelectParams } from \"../selectors.js\";\n\nimport Navbar from \"../../../components/NavBar/index.js\";\nimport MainContainer from \"../../../components/MainContainer/index.js\";\nimport { useInjectReducer } from \"../../../HOC/useInjectReducer.js\";\nimport { useInjectSaga } from \"../../../HOC/injectSaga.js\";\n\nconst key = \"user\";\n\nconst UserRegister = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n  const [registerForm, updateRegisterForm] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password_confirmation: \"\"\n  });\n  const onChangeHandler = (e, { name, value }) => {\n    const newFormValues = { ...registerForm };\n    newFormValues[[name]] = value;\n    updateRegisterForm(newFormValues);\n  };\n\n  const onRegisterUserHandler = (e, data) => {\n    dispatch(initRegisterUser(registerForm));\n  };\n\n  return (\n    <MainContainer>\n      <Navbar />\n      <h2>User Register</h2>\n      <Form onSubmit={onRegisterUserHandler}>\n        <Form.Input\n          label=\"Username\"\n          name=\"name\"\n          placeholder=\"Username\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"Password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"Password Confirmation\"\n          name=\"password_confirmation\"\n          placeholder=\"Password Confirmation\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"email\"\n          name=\"email\"\n          placeholder=\"email\"\n          onChange={onChangeHandler}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </MainContainer>\n  );\n};\nconst mapStateToProps = () => {\n  const getParams = makeSelectParams();\n  const mapState = state => {\n    return {\n      params: getParams(state)\n    };\n  };\n  return mapState;\n}; //?\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     dispatchToHandRange: (data) => dispatch(setHandRange(data))\n//   };\n// };\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(UserRegister);\n","import React, { useState, useEffect, memo, Fragment } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport MainContainer from \"../../../components/MainContainer\";\n// import UseRequest1API from \"../../HOC/API/useRequest1\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport reducer from \"../reducer.js\";\nimport saga from \"../saga.js\";\nimport { initRegisterUser, userSignin } from \"../actions.js\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Navbar from \"../../../components/NavBar\";\n\nimport { useInjectReducer } from \"../../../HOC/useInjectReducer.js\";\nimport { useInjectSaga } from \"../../../HOC/injectSaga.js\";\nimport { makeSelectUser } from \"../selectors\";\n\nconst key = \"user\";\n\nexport const UserLogin = ({ user }) => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n  const [registerForm, updateRegisterForm] = useState({\n    name: \"\",\n    password: \"\"\n  });\n  const onChangeHandler = (e, { name, value }) => {\n    const newFormValues = { ...registerForm };\n    newFormValues[name] = value;\n    updateRegisterForm(newFormValues);\n  };\n\n  const onSubmitHandler = (e, data) => {\n    dispatch(userSignin(registerForm));\n  };\n  console.log(user);\n  return (\n    <MainContainer>\n      <Navbar username={user.name} />\n      {user.name == false ? (\n        <Fragment>\n          <h2>User Login</h2>\n          <Form onSubmit={onSubmitHandler}>\n            <Form.Input\n              label=\"Username\"\n              name=\"name\"\n              placeholder=\"Name\"\n              onChange={onChangeHandler}\n            />\n            <Form.Input\n              label=\"Password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={onChangeHandler}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Fragment>\n      ) : (\n        <div>You are currently logged in.</div>\n      )}\n    </MainContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  user: makeSelectUser()\n});\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(UserLogin);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Provider } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport throttle from \"lodash/throttle\";\nimport { saveState } from \"./localStorage\";\nimport configureStore from \"./configureStore\";\nimport { initialState } from \"./containers/MainPage/reducer.js\";\nimport history from \"./utils/history\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport UserRegister from \"./containers/Auth/Register/UserRegister.js\";\nimport Login from \"./containers/Auth/Login/UserLogin.js\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport config from \"./auth_config\";\n\n//const store = createStore(combineReducers({rootReducer, handRangesAvailable}), applyMiddleware(thunk));\n// Create redux store with history\n//const initialState = {};\nconst store = configureStore(initialState, history);\n\nstore.subscribe(\n  throttle(() => {\n    const { global, user } = store.getState();\n    saveState({ global, user });\n  }, 1000)\n);\n\nconst siteUrl = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState) => {\n  history.push(appState && siteUrl ? siteUrl : window.location.pathname);\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={siteUrl}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <Provider store={store}>\n      <Router history={history}>\n        <ThemeProvider theme={{ main: \"mediumseagreen\" }}>\n          <Route exact path=\"/\" component={App} />\n          <Route exact path=\"/register\" component={UserRegister} />\n          <Route exact path=\"/login\" component={Login} />\n        </ThemeProvider>\n      </Router>\n    </Provider>\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport createReducer from \"./reducers\";\nimport { loadState } from \"./localStorage\";\nimport initialStates from \"./containers/MainPage/reducer.js\";\n\nexport default function configureStore(initialState = initialStates, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== \"production\" && typeof window === \"object\") {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    // /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const persistedState = loadState();\n\n  const store = createStore(\n    createReducer(),\n    // initialState,\n    persistedState,\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"],"sourceRoot":""}