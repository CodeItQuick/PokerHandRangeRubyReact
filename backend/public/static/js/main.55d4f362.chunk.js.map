{"version":3,"sources":["containers/MainPage/constants.js","containers/MainPage/sampleData.js","containers/MainPage/reducer.js","containers/MainPage/selectors.js","containers/MainPage/Board/EquityCalculations.js","containers/MainPage/Board/Styles.js","containers/MainPage/Board/StateUpdate.js","containers/MainPage/Board/index.js","HOC/checkStore.js","utils/history.js","containers/Auth/constants.js","containers/Auth/reducer.js","reducers.js","HOC/reducerInjectors.js","HOC/useInjectReducer.js","containers/MainPage/BoardLegend/BoardLegend.js","containers/MainPage/actions.js","HOC/constants.js","HOC/sagaInjectors.js","HOC/injectSaga.js","utils/request.js","containers/MainPage/saga.js","containers/MainPage/ProductDescription/index.js","containers/MainPage/InputForm/BoardCards.js","containers/MainPage/InputForm/InputStreet.js","containers/MainPage/InputForm/InputStreetAction.js","containers/MainPage/InputForm/index.js","containers/MainPage/ProgressIndicator/index.js","containers/MainPage/index.js","containers/MainPage/stateRangeFunctions.js","components/NavBar/index.js","components/MainContainer/index.js","containers/App/App.js","serviceWorker.js","localStorage.js","containers/Auth/actions.js","containers/Auth/saga.js","containers/Auth/selectors.js","containers/Auth/Register/UserRegister.js","containers/Auth/Login/UserLogin.js","index.js","configureStore.js"],"names":["SET_HAND_RANGE","SET_HAND_RANGE_SELECT","SET_DEAD_CARDS","SET_IS_IP","LOAD_EQUITIES","ranges","Street","BetType","hands","sampleData","mode","street","streetAction","isIP","rangeSelectionArray","folderID","folderSubgroupName","folderSubgroupRangeName","rangeColors","rangeRepoIP","JSON","parse","stringify","rangeRepoOOP","initialState","deadcards","loadEquities","handEquities","mainPageReducer","state","action","produce","draft","type","data","Position","newCards","position","newRangeIP","newRangeOOP","newRanges","name","value","selectGlobal","global","makeSelectMode","createSelector","globalState","makeSelectSelectedRanges","filter","makeSelectRange","makeSelectDeadcards","makeSelectRangeRepoIP","makeSelectRangeRepoOOP","calculateEquity","handRange","inputBoard","rangeTwo","Calculator","OddsCalculator","length","handRangeExpanded","map","handR","expandSuitsPair","rangeTwoExpanded","range","equities","reduce","acc","substr","indexOf","calculateOverallEquity","equity","curr","handOne","board","CardGroup","fromString","player1Cards","player2Cards","result","calculate","hand0Wins","bestHandCount","totalIterations","possibleHandsCount","tieCount","tieHandCount","suits","cardOneSuit","cardOneIndex","concat","slice","cardTwoSuit","cardTwoIndex","ColorCard","styled","animated","button","props","coloring","border_attrib","StyledRow","Table","Row","StyledCol","Cell","orderedCard","displayCardSuit","cardOne","cardTwo","getCards","card1","card2","generateCardGrid","PreflopRanges","cardClone","forEach","hand","idx","colorCards","generateBoard","PreflopRangesOnly","bind","cards","allPreflopHands","push","row","columnJSX","cardHand","key","id","hasOwnProperty","loadNewBoardOnLoadStreet","otherRange","calcHandEquities","deadcardsForStreet","console","log","join","Object","keys","cardValue","handsArr","toFixed","calcEquities","withConnect","connect","getRangesSelected","getLoadEquities","getOtherRange","getHandEquities","getMode","getRanges","getSelectedStreet","getRangesPreflop","SelectedRanges","SelectedStreet","preflopRanges","compose","memo","onMouseOverHandler","useState","manyHands","setManyHands","setCards","useDispatch","useGesture","onDrag","args","onMouseDownEvent","down","first","threshold","filterTaps","onMove","delay","useEffect","displayWidgetAndSetManyHands","newManyHands","newSetCards","newSetManyHands","celled","striped","unstackable","Body","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","history","createBrowserHistory","USER_SIGNIN","USER_SIGNIN_FAIL","USER_LOADED","CLEAR_ERROR_STATE","INIT_REGISTER_USER","REGISTER_USER_FAIL","loading","error","invalid","message","email","token","authReducer","user","params","createReducer","rootReducer","combineReducers","globalReducer","router","connectRouter","injectReducerFactory","isValid","reducer","isString","isEmpty","Reflect","has","getInjectors","injectReducer","useInjectReducer","context","React","useContext","ReactReduxContext","StyledContainer","Container","StyledGreenRow","StyledVioletRow","StyledBlueRow","StyledRedRow","StyledInvertedRow","Header","legendTable","numberOfCombos","nameOfAction","onHandleStreetHandlerButtons","streetActions","HeaderCell","countHandCombo","wholeRange","chosenStreet","wholeRangeFiltered","wholeRangeNum","filteredBoard","trim","boardCard","charAt","specificHands","addCombos","totalHands","acc2","specificCards","numOccurances","_","countBy","split","comboCounter","getDeadcards","getSelectedRange","onHandleStreetHandler","Preflop","Flop","Turn","River","updateNumberOfCombos","setHandRangeSelect","DAEMON","allowedModes","checkKey","checkDescriptor","descriptor","saga","includes","injectSagaFactory","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectSaga","ejectSaga","useInjectSaga","injectors","parseJSON","response","status","json","checkStatus","Error","statusText","request","url","options","fetch","then","handData","process","img","Col","BoardCard","displayCard","Image","size","alt","src","className","Array","isArray","toUpperCase","xs","InputStreet","Button","Group","onClick","active","inverted","color","Or","InputStreetAction","fluid","e","DeadCards","Form","Input","getRange","getRangeRepoIP","getRangeRepoOOP","getPosition","selectedRanges","onChangePosition","onCalculateEquities","Segment","stacked","Label","ribbon","Icon","placeholder","onChange","target","textAlign","ProgressIndicator","handsIPUsed","handsOOPUsed","Step","completed","Content","Description","div","LeftPane","RightPane","handsInRange","inpRange","getMapRange","getSelectRange","toAllUserHandRange","setHandsIPUsed","setHandsOOPUsed","newHandRange","oldHandRange","draftModeStreet","draftModeStreetAction","actionDataCards","rangeObj","hasStreetAndCurrentBetType","hasHandInRange","handsWithRemovedCards","indexHandInRange","splice","setHandRange","Navbar","username","Menu","Item","to","MainContainer","children","steps","selector","content","mapStateToProps","createStructuredSelector","useSelector","isTourOpen","updateTourOpen","isOpen","onRequestClose","Boolean","window","location","hostname","match","loadState","serializedState","localStorage","getItem","userSignin","userSigninSuccess","userSigninFail","baseURL","logoutSaga","authStateSaga","userSigninSaga","userSignupSaga","userRoot","call","put","userid","requestURL","headers","Authorization","password","body","requestParams","method","setItem","err","code","str","toString","replace","qs","all","takeLatest","selectUser","getParams","userState","password_confirmation","registerForm","updateRegisterForm","onChangeHandler","newFormValues","onSubmit","label","composeEnhancers","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","enhancers","applyMiddleware","persistedState","createStore","run","configureStore","throttle","saveState","ReactDOM","render","theme","main","exact","path","component","App","UserRegister","Login","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55d4f362.chunk.js","sourcesContent":["/*\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const SET_HAND_RANGE = \"handrangeAPI/MainPage/SET_HAND_RANGE\";\nexport const SET_HAND_RANGE_SELECT =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_SELECT\";\nexport const INIT_ALL_USER_HAND_RANGES =\n  \"handrangeAPI/MainPage/INIT_ALL_USER_HAND_RANGES\";\n\nexport const ALL_USER_HAND_RANGES_SUCCESS =\n  \"handrangeAPI/MainPage/ALL_USER_HAND_RANGES_SUCCESS\";\n\nexport const ALL_USER_HAND_RANGES_FAIL =\n  \"handrangeAPI/MainPage/ALL_USER_HAND_RANGES_FAIL\";\n\nexport const INIT_CREATE_NEW_FOLDER =\n  \"handrangeAPI/MainPage/INIT_CREATE_NEW_FOLDER\";\nexport const CREATE_NEW_FOLDER_SUCCESS =\n  \"handrangeAPI/MainPage/CREATE_NEW_FOLDER_SUCCESS\";\nexport const CREATE_NEW_FOLDER_FAIL =\n  \"handrangeAPI/MainPage/CREATE_NEW_FOLDER_FAIL\";\n\nexport const SET_HAND_RANGE_GROUP =\n  \"handrangeAPI/MainPage/SET_HAND_RANGE_GROUP\";\n\nexport const SET_DYNAMIC_FOLDER_INFO =\n  \"handrangeAPI/MainPage/SET_DYNAMIC_FOLDER_INFO\";\n\nexport const SAVE_AND_LOAD = \"handrangeAPI/MainPage/SAVE_AND_LOAD\";\n\nexport const LOAD_NEW_FOLDER = \"handrangeAPI/MainPage/LOAD_NEW_FOLDER\";\n\nexport const SET_DEAD_CARDS = \"handrangeAPI/MainPage/SET_DEAD_CARDS\";\nexport const GET_DEAD_CARDS = \"handrangeAPI/MainPage/GET_DEAD_CARDS\";\n\nexport const SET_IS_IP = \"handrangeAPI/MainPage/IS_IP\";\nexport const LOAD_EQUITIES = \"handrangeAPI/MainPage/LOAD_EQUITIES\";\nexport const LOAD_EQUITIES_SUCCESS =\n  \"handrangeAPI/MainPage/LOAD_EQUITIES_SUCCESS\";\n","const ranges = [\n  {\n    Street: \"Preflop\",\n    BetType: \"Raise4BetCall\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"Raise4BetFold\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"RaiseCall\",\n    hands: []\n  },\n  {\n    Street: \"Preflop\",\n    BetType: \"RaiseFold\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"Flop\",\n    BetType: \"CheckFold\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"Turn\",\n    BetType: \"CheckFold\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"Valuebet\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"Bluff\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"CheckCall\",\n    hands: []\n  },\n  {\n    Street: \"River\",\n    BetType: \"CheckFold\",\n    hands: []\n  }\n];\nconst sampleData = {\n  mode: {\n    street: \"Preflop\",\n    streetAction: \"Raise4BetCall\",\n    isIP: true\n  },\n  rangeSelectionArray: {\n    folderID: \"Evan's Second Folder\",\n    folderSubgroupName: \"Opening Ranges\",\n    folderSubgroupRangeName: \"UTG\"\n  },\n  rangeColors: {\n    \"0\": [],\n    \"1\": [],\n    \"2\": [],\n    \"3\": []\n  },\n  rangeRepoIP: JSON.parse(JSON.stringify(ranges)),\n  rangeRepoOOP: JSON.parse(JSON.stringify(ranges))\n};\n\nexport { sampleData, ranges };\n","import produce from \"immer\";\n\nimport {\n  SET_HAND_RANGE,\n  SET_HAND_RANGE_SELECT,\n  INIT_CREATE_NEW_FOLDER,\n  CREATE_NEW_FOLDER_SUCCESS,\n  CREATE_NEW_FOLDER_FAIL,\n  SET_HAND_RANGE_GROUP,\n  SET_DYNAMIC_FOLDER_INFO,\n  SAVE_AND_LOAD,\n  LOAD_NEW_FOLDER,\n  INIT_ALL_USER_HAND_RANGES,\n  ALL_USER_HAND_RANGES_SUCCESS,\n  ALL_USER_HAND_RANGES_FAIL,\n  SET_DEAD_CARDS,\n  SET_IS_IP,\n  LOAD_EQUITIES,\n  LOAD_EQUITIES_SUCCESS\n} from \"./constants.js\";\n\nimport { sampleData, ranges } from \"./sampleData.js\";\n\nconst initialState = {\n  mode: sampleData.mode,\n  rangeSelectionArray: sampleData.rangeSelectionArray,\n  rangeColors: sampleData.rangeColors,\n  rangeRepoIP: sampleData.rangeRepoIP,\n  rangeRepoOOP: sampleData.rangeRepoOOP,\n  ranges: ranges,\n  deadcards: [],\n  loadEquities: false,\n  handEquities: [{}, {}]\n};\n\n//TODO: Make ranges convert between easy to read ranges\nconst mainPageReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case LOAD_EQUITIES:\n        draft.loadEquities = true;\n        break;\n\n      case LOAD_EQUITIES_SUCCESS:\n        if (action.data.Position) draft.handEquities[0] = action.data.newCards;\n        else draft.handEquities[1] = action.data.newCards;\n        break;\n\n      case SET_IS_IP:\n        draft.mode.isIP = action.data.position;\n        draft.rangeRepoIP = action.data.newRangeIP;\n        draft.rangeRepoOOP = action.data.newRangeOOP;\n        draft.ranges = action.data.newRanges;\n        draft.loadEquities = false;\n        break;\n\n      case SET_HAND_RANGE_SELECT:\n        draft.mode.street = action.data.name || \"Preflop\";\n        draft.mode.streetAction = action.data.value;\n        draft.loadEquities = false;\n        break;\n\n      case SET_HAND_RANGE:\n        draft.ranges = action.data;\n        draft.loadEquities = false;\n\n        break;\n\n      case SET_DEAD_CARDS:\n        draft.deadcards = action.data;\n        draft.loadEquities = false;\n        break;\n\n      default:\n        break;\n    }\n  });\nexport default mainPageReducer;\nexport { initialState };\n","/**\n * The home state selectors\n */\n\nimport { createSelector } from \"reselect\";\n\nimport { initialState } from \"./reducer\";\n\nconst selectGlobal = state =>\n  state.global || JSON.parse(JSON.stringify(initialState)); //??\nconst selectRouter = state => state.router;\n\nconst selectUser = state => state.user;\n\nconst makeSelectMode = () => {\n  return createSelector(selectGlobal, globalState => {\n    return globalState.mode;\n  });\n};\nconst makeSelectSelectedRanges = () => {\n  return createSelector(selectGlobal, global => {\n    if (\n      global &&\n      global.mode &&\n      global.mode.street &&\n      global.mode.streetAction &&\n      global.ranges\n    ) {\n      return global.ranges.filter(({ Street, BetType }) => {\n        return (\n          Street == global.mode.street && BetType == global.mode.streetAction\n        );\n      });\n    } else return initialState.ranges;\n  });\n};\n\nconst makeSelectSelectedStreet = () => {\n  return createSelector(selectGlobal, global => {\n    if (global && global.mode && global.mode.street && global.ranges) {\n      return global.ranges.filter(({ Street, BetType }) => {\n        return Street == global.mode.street;\n      });\n    } else return initialState.ranges;\n  });\n};\n\n//FIXME: Needs a rename because its all ranges\nconst makeSelectRangesPreflop = () => {\n  return createSelector(selectGlobal, global => {\n    if (global && global.mode && global.mode.street && global.mode.streetAction)\n      return global.ranges.filter(({ Street }) => Street == global.mode.street);\n    else return initialState.ranges.filter(({ Street }) => Street == \"Preflop\");\n  });\n};\n\nconst makeSelectRange = () =>\n  createSelector(selectGlobal, globalState => globalState.ranges);\n\nconst makeSelectUser = () => createSelector(selectUser, userState => userState);\n\nconst makeSelectDeadcards = () =>\n  createSelector(selectGlobal, globalState => globalState.deadcards);\n\nconst makeSelectRangeRepoIP = () =>\n  createSelector(selectGlobal, globalState => globalState.rangeRepoIP);\n\nconst makeSelectRangeRepoOOP = () =>\n  createSelector(selectGlobal, globalState => globalState.rangeRepoOOP);\n\nconst makeSelectPosition = () =>\n  createSelector(selectGlobal, globalState => globalState.mode.isIP);\n\nconst makeSelectOtherRange = () => {\n  return createSelector(selectGlobal, globalState => {\n    let rangeRepoPreflop = initialState.ranges;\n    if (globalState.mode.isIP) rangeRepoPreflop = globalState.rangeRepoIP;\n    else rangeRepoPreflop = globalState.rangeRepoOOP;\n    return rangeRepoPreflop;\n  });\n};\n\nconst makeSelectLoadEquities = () =>\n  createSelector(selectGlobal, globalState => globalState.loadEquities);\n\nconst makeSelectHandEquities = () =>\n  createSelector(selectGlobal, globalState => globalState.handEquities);\n\nexport {\n  selectGlobal,\n  selectRouter,\n  makeSelectSelectedRanges,\n  makeSelectSelectedStreet,\n  makeSelectRangeRepoIP,\n  makeSelectRangeRepoOOP,\n  makeSelectRangesPreflop,\n  makeSelectRange,\n  makeSelectMode,\n  makeSelectUser,\n  makeSelectDeadcards,\n  makeSelectPosition,\n  makeSelectLoadEquities,\n  makeSelectOtherRange,\n  makeSelectHandEquities\n};\n","import { CardGroup, OddsCalculator } from \"poker-odds-calculator\";\nimport prange from \"prange\";\n\nexport const doesShareTwoCardsBetweenTwoHands = (handOne, handTwo) => {\n  return false;\n};\n\n//TODO: Inject OddsCalculator into this function so I can test it easier\nexport const calculateEquity = (\n  handRange,\n  inputBoard,\n  rangeTwo,\n  Calculator = OddsCalculator\n) => {\n  if (handRange.length == 0 || rangeTwo.length == 0 || inputBoard.length < 3)\n    return 0;\n\n  let handRangeExpanded = handRange.map(handR => expandSuitsPair(handR))[0];\n  let rangeTwoExpanded = rangeTwo.map(range => expandSuitsPair(range))[0];\n  let equities = handRangeExpanded.reduce(\n    (acc, handR) => [\n      ...acc,\n      ...rangeTwoExpanded\n        .filter(\n          rangeTwo =>\n            rangeTwo.substr(0, 2) != handR.substr(0, 2) &&\n            rangeTwo.substr(0, 2) != handR.substr(2, 2) &&\n            rangeTwo.substr(2, 2) != handR.substr(0, 2) &&\n            rangeTwo.substr(2, 2) != handR.substr(2, 2)\n        )\n        .filter(\n          rangeTwo =>\n            !(inputBoard.indexOf(rangeTwo.substr(0, 2)) >= 0) &&\n            !(inputBoard.indexOf(handR.substr(0, 2)) >= 0) &&\n            !(inputBoard.indexOf(rangeTwo.substr(2, 2)) >= 0) &&\n            !(inputBoard.indexOf(handR.substr(2, 2)) >= 0)\n        )\n        .map(range =>\n          calculateOverallEquity(handR, inputBoard, range, Calculator)\n        )\n    ],\n    []\n  );\n  let equity = equities.reduce((acc, curr) => {\n    if (curr != -1) return acc + curr;\n    else return acc;\n  }, 0); //?\n  equity = equity / equities.length;\n  return equity;\n};\n\nconst calculateOverallEquity = (\n  handRange,\n  inputBoard,\n  rangeTwo,\n  Calculator = OddsCalculator\n) => {\n  let handOne = handRange;\n  let board = CardGroup.fromString(inputBoard);\n\n  let player1Cards = CardGroup.fromString(handOne);\n  let player2Cards = CardGroup.fromString(rangeTwo);\n\n  let result = Calculator.calculate([player1Cards, player2Cards], board);\n\n  let hand0Wins = result.equities[0].bestHandCount; //?\n  let totalIterations = result.equities[0].possibleHandsCount; //?\n  let tieCount = result.equities[0].tieHandCount; //?\n\n  return (hand0Wins + tieCount) / (totalIterations + tieCount * 2);\n};\n\nconst expandSuitsPair = handRange => {\n  let expandedHand = [];\n  if (handRange[0] == handRange[1]) {\n    const suits = [\"c\", \"s\", \"d\", \"h\"];\n    expandedHand = suits.reduce((acc, cardOneSuit, cardOneIndex) => {\n      return acc.concat(\n        suits.slice(cardOneIndex + 1, 4).map((cardTwoSuit, cardTwoIndex) => {\n          return handRange[0] + cardOneSuit + handRange[1] + cardTwoSuit;\n        })\n      );\n    }, []);\n    return expandedHand.slice(0, 6);\n  }\n\n  if (handRange[2] == \"o\") {\n    const suits = [\"c\", \"s\", \"d\", \"h\"];\n    expandedHand = suits.reduce((acc, cardOneSuit, cardOneIndex) => {\n      return acc.concat(\n        suits.slice(cardOneIndex + 1, 4).map(cardTwoSuit => {\n          return handRange[0] + cardOneSuit + handRange[1] + cardTwoSuit;\n        }),\n        suits.slice(cardOneIndex + 1, 4).map(cardTwoSuit => {\n          return handRange[0] + cardTwoSuit + handRange[1] + cardOneSuit;\n        })\n      );\n    }, []);\n    return expandedHand;\n  }\n\n  if (handRange[2] == \"s\") {\n    const suits = [\"c\", \"s\", \"d\", \"h\"];\n    expandedHand = suits.reduce((acc, cardOneSuit) => {\n      return acc.concat(\n        handRange[0] + cardOneSuit + handRange[1] + cardOneSuit\n      );\n    }, []);\n    return expandedHand;\n  }\n};\n","import styled from \"styled-components\";\nimport { useSpring, animated } from \"react-spring\";\nimport { Grid, Button, Table } from \"semantic-ui-react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nexport const ColorCard = styled(animated.button)`\n  cursor: pointer;\n  height: 100% !important;\n  width: 100% !important;\n  padding: 0px;\n  margin: 0px;\n  font-size: 7px;\n  text-align: center;\n  color: black;\n  background-color: ${(props) => props.coloring};\n  ${(props) =>\n    props.border_attrib\n      ? \"border: 2px dashed black;\"\n      : \"border: 0px solid black;\"}\n  @media (min-width: 576px) {\n    font-size: 12px;\n  }\n`;\n\nexport const StyledRow = styled(Table.Row)`\n  margin: 0px;\n  flex-wrap: nowrap !important;\n`;\n\nexport const StyledCol = styled(Table.Cell)`\n  padding: 0px !important;\n  margin: 0px;\n`;\nexport const orderedCard = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"T\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\",\n];\n","import React from \"react\";\nimport { calculateEquity } from \"./EquityCalculations.js\";\nimport { StyledCol, ColorCard, StyledRow } from \"./Styles.js\";\n\nexport const orderedCard = [\n  \"A\",\n  \"K\",\n  \"Q\",\n  \"J\",\n  \"T\",\n  \"9\",\n  \"8\",\n  \"7\",\n  \"6\",\n  \"5\",\n  \"4\",\n  \"3\",\n  \"2\",\n];\n\nexport const displayCardSuit = (cardOne, cardTwo) => {\n  let displaySuit = \"\";\n  if (orderedCard.indexOf(cardOne) < orderedCard.indexOf(cardTwo)) {\n    displaySuit = \"s\";\n  } else if (cardOne === cardTwo) {\n    displaySuit = \"\";\n  } else {\n    displaySuit = \"o\";\n  }\n  return displaySuit;\n};\n\nexport const getCards = (cardOne, cardTwo) => {\n  let card1 = \"\",\n    card2 = \"\";\n  if (orderedCard.indexOf(cardOne) < orderedCard.indexOf(cardTwo)) {\n    card1 = cardOne;\n    card2 = cardTwo;\n  } else if (cardOne === cardTwo) {\n    card1 = cardOne;\n    card2 = cardTwo;\n  } else {\n    card1 = cardTwo;\n    card2 = cardOne;\n  }\n  return card1 + card2;\n};\n\nexport const generateCardGrid = (PreflopRanges, Position) => {\n  let cardClone = {};\n\n  orderedCard.forEach((cardOne) =>\n    orderedCard.forEach((cardTwo) => {\n      let hand = getCards(cardOne, cardTwo) + displayCardSuit(cardOne, cardTwo);\n      if (PreflopRanges) {\n        PreflopRanges.forEach(({ hands }, idx) => {\n          if (hands.indexOf(hand) >= 0) {\n            cardClone = {\n              ...cardClone,\n              [hand]: {\n                colorCards: [\"#8bddbe\", \"#ed87a7\", \"#6b6c7c\", \"#d3d3d3\"][idx],\n                equity: \"n/a\",\n              },\n            };\n          }\n        });\n      }\n    })\n  );\n\n  return cardClone;\n};\n\nexport const addEquityCardGrid = (deadcards, otherRange, cards) => {\n  let inputBoard = deadcards.reduce((acc, inpCard, idx) => {\n    if (idx > 0) return acc + \",\" + inpCard;\n    else return inpCard;\n  }, \"\");\n  let inputRange = otherRange.reduce((acc, { hands }) => {\n    if (hands.length > 0) return [...acc, ...hands];\n    else return acc;\n  }, []);\n  let newCards = Object.keys(cards).reduce((acc, card) => {\n    return {\n      ...acc,\n      [card]: {\n        colorCards: cards[card].colorCards,\n        equity: calculateEquity(card, inputBoard, inputRange),\n      },\n    };\n  }, []);\n  return newCards;\n};\n\nexport const generateBoard = (PreflopRangesOnly, bind, cards) => {\n  let allPreflopHands = PreflopRangesOnly.reduce((acc, curr) => {\n    if (acc.hands && curr.hands) return [...acc.hands, ...curr.hands];\n    else return [...acc, ...curr.hands];\n  }, []);\n\n  let toSetManyHands = [];\n\n  toSetManyHands = orderedCard.map((cardOne) =>\n    orderedCard.reduce((acc, cardTwo, idx) => {\n      acc.push([cardOne, cardTwo]);\n      return acc;\n    }, [])\n  );\n\n  let setNewManyHands = toSetManyHands.map((row, idx) => {\n    let columnJSX = row.map(([cardOne, cardTwo]) => {\n      let cardHand =\n        getCards(cardOne, cardTwo) + displayCardSuit(cardOne, cardTwo);\n\n      return (\n        <StyledCol key={cardHand}>\n          <ColorCard\n            key={\"colorcard\" + cardHand}\n            id={\"colorButton\" + cardHand}\n            {...bind(cardHand)}\n            hand={cardHand}\n            coloring={\n              cards && cards.hasOwnProperty(cardHand)\n                ? cards[cardHand].colorCards\n                : \"555\"\n            }\n            border_attrib={allPreflopHands.indexOf(cardHand) >= 0}\n          >\n            {cardHand}\n            <br />\n            {cards && cardHand && cards.hasOwnProperty(cardHand)\n              ? cards[cardHand].equity\n              : \"n/a\"}\n          </ColorCard>\n        </StyledCol>\n      );\n    });\n    return <StyledRow>{columnJSX}</StyledRow>;\n  });\n  return setNewManyHands;\n};\n","import React, { useState, useEffect, memo, Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Grid, Button, Table } from \"semantic-ui-react\";\nimport { useDrag, useGesture, useMove } from \"react-use-gesture\";\n\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport {\n  makeSelectSelectedRanges,\n  makeSelectLoadEquities,\n  makeSelectDeadcards,\n  makeSelectOtherRange,\n  makeSelectHandEquities,\n  makeSelectMode,\n  makeSelectRange,\n  makeSelectRangesPreflop,\n} from \"../selectors\";\n\nimport { generateCardGrid, generateBoard } from \"./StateUpdate\";\n//TODO: implement interact.js or draggable instead of this react library\n\nimport { calculateEquity } from \"./EquityCalculations\";\n\n//FIXME: the equity is wrong on the river range vs range\nexport const calcEquities = (cards, deadcards, otherRange, street) => {\n  let calcHandEquities;\n\n  console.log(cards, deadcards, otherRange, street); //?\n\n  let deadcardsForStreet;\n  if (street == \"Preflop\") deadcardsForStreet = \"\";\n  else if (street == \"Flop\") deadcardsForStreet = deadcards.slice(0, 3).join();\n  else if (street == \"Turn\") deadcardsForStreet = deadcards.slice(0, 4).join();\n  else if (street == \"River\") deadcardsForStreet = deadcards.slice(0, 5).join();\n\n  calcHandEquities = Object.keys(cards).reduce((acc, cardValue) => {\n    return {\n      ...acc,\n      [cardValue]: {\n        colorCards: cards[cardValue].colorCards,\n        equity: calculateEquity(\n          [cardValue],\n          deadcardsForStreet,\n          otherRange.reduce(\n            (acc, { hands: [handsArr] }) =>\n              handsArr ? [...acc, handsArr] : acc,\n            []\n          )\n        ).toFixed(2),\n      },\n    };\n  }, {});\n\n  return calcHandEquities;\n};\n\nconst displayWidgetAndSetManyHands = (preflopRanges, isIP, bind) => {\n  let newCards;\n\n  //generate the card grid\n  newCards = generateCardGrid(preflopRanges, isIP);\n\n  let generatedBoard = generateBoard(preflopRanges, bind, newCards);\n\n  return [generatedBoard, newCards];\n};\n\n//TODO: make 119->131 should be a function\nconst loadNewBoardOnLoadStreet = (\n  loadEquities,\n  ranges,\n  isIP,\n  otherRange,\n  street,\n  bind,\n  deadcards\n) => {\n  if (loadEquities) {\n    let newCards = generateCardGrid(ranges, isIP);\n    let calcHandEquities = calcEquities(\n      newCards,\n      deadcards,\n      otherRange,\n      street\n    );\n\n    let displayCardsOr = calcHandEquities ? calcHandEquities : newCards;\n\n    return generateBoard(ranges, bind, displayCardsOr);\n  }\n};\n\nconst Board = ({\n  onMouseOverHandler,\n  SelectedRanges,\n  loadEquities,\n  deadcards,\n  otherRange,\n  handEquities,\n  mode: { street, streetAction, isIP },\n  ranges,\n  SelectedStreet,\n  preflopRanges,\n}) => {\n  const [manyHands, setManyHands] = useState();\n  const [cards, setCards] = useState();\n  const dispatch = useDispatch();\n\n  // Set the drag hook and define component movement based on gesture data\n  const bind = useGesture({\n    onDrag: (props) =>\n      onMouseOverHandler(\n        {\n          cards: props.args[props.args.length - 1],\n          onMouseDownEvent:\n            (props.memo !== props.args[props.args.length - 1] && props.down) ||\n            (props.first && props.down),\n        },\n        { threshold: 40, filterTaps: false }\n      ),\n    onMove: (props) =>\n      onMouseOverHandler(\n        {\n          cards: props.args[props.args.length - 1],\n          onMouseDownEvent:\n            (props.memo !== props.args[0] && props.down) ||\n            (props.first && props.down),\n        },\n        { threshold: 40, delay: true }\n      ),\n  });\n\n  useEffect(() => {\n    const [newManyHands, newSetCards] = displayWidgetAndSetManyHands(\n      preflopRanges,\n      isIP,\n      bind\n    );\n    setManyHands(newManyHands);\n    setCards(newSetCards);\n    //If there are new equities to be entered, dispatch the action\n  }, [SelectedStreet, preflopRanges, ranges, isIP, handEquities]);\n\n  useEffect(() => {\n    //set the new cards\n\n    if (loadEquities) {\n      const newSetManyHands = loadNewBoardOnLoadStreet(\n        loadEquities,\n        ranges,\n        isIP,\n        otherRange,\n        street,\n        bind,\n        deadcards\n      );\n      setManyHands(newSetManyHands);\n    }\n\n    //If there are new equities to be entered, dispatch the action\n    //TODO: Implement this\n    // dispatch(loadEquitiesSuccess({ Position, newCards: calcHandEquities }));\n  }, [street, loadEquities]);\n\n  return (\n    <Table celled striped unstackable>\n      <Table.Body>{manyHands}</Table.Body>\n    </Table>\n  ); //TO-DO: BUG this generates console error\n};\n\nconst mapStateToProps = () => {\n  const getRangesSelected = makeSelectSelectedRanges();\n  const getLoadEquities = makeSelectLoadEquities();\n  const getCards = makeSelectDeadcards();\n  const getOtherRange = makeSelectOtherRange();\n  const getHandEquities = makeSelectHandEquities();\n  const getMode = makeSelectMode();\n  const getRanges = makeSelectRange();\n  const getSelectedStreet = makeSelectSelectedRanges();\n  const getRangesPreflop = makeSelectRangesPreflop();\n\n  const mapState = (state) => {\n    return {\n      SelectedRanges: getRangesSelected(state),\n      ranges: getRanges(state),\n      loadEquities: getLoadEquities(state),\n      handEquities: getHandEquities(state),\n      deadcards: getCards(state),\n      otherRange: getOtherRange(state),\n      mode: getMode(state),\n      SelectedStreet: getSelectedStreet(state),\n      preflopRanges: getRangesPreflop(state),\n    };\n  };\n\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(Board);\n","import { conformsTo, isFunction, isObject } from \"lodash\";\nimport invariant from \"invariant\";\n\n/**\n * Validate the shape of redux store\n */\nexport default function checkStore(store) {\n  const shape = {\n    dispatch: isFunction,\n    subscribe: isFunction,\n    getState: isFunction,\n    replaceReducer: isFunction,\n    runSaga: isFunction,\n    injectedReducers: isObject,\n    injectedSagas: isObject\n  };\n  invariant(\n    conformsTo(store, shape),\n    \"(app/utils...) injectors: Expected a valid redux store\"\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","/*\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const VALIDATE_TOKEN_SUCCESS =\n  \"handrangeAPI/Auth/VALIDATE_TOKEN_SUCCESS\";\nexport const VALIDATE_TOKEN_FAIL = \"handrangeAPI/Auth/VALIDATE_TOKEN_FAIL\";\n\nexport const USER_SIGNUP = \"handrangeAPI/Auth/USER_SIGNUP\";\nexport const USER_SIGNUP_SUCCESS = \"handrangeAPI/Auth/USER_SIGNUP_SUCCESS\";\nexport const USER_SIGNUP_FAIL = \"handrangeAPI/Auth/USER_SIGNUP_FAIL\";\n\nexport const USER_SIGNIN = \"handrangeAPI/Auth/USER_SIGNIN\";\nexport const USER_SIGNIN_SUCCESS = \"handrangeAPI/Auth/USER_SIGNIN_SUCCESS\";\nexport const USER_SIGNIN_FAIL = \"handrangeAPI/Auth/USER_SIGNIN_FAIL\";\n\nexport const USER_SIGNOUT = \"handrangeAPI/Auth/USER_SIGNOUT\";\nexport const USER_SIGNOUT_SUCCESS = \"handrangeAPI/Auth/USER_SIGNOUT_SUCCESS\";\nexport const USER_SIGNOUT_FAIL = \"handrangeAPI/Auth/USER_SIGNOUT_FAIL\";\n\nexport const USER_REQUESTED = \"handrangeAPI/Auth/USER_REQUESTED\";\nexport const USER_LOADED = \"handrangeAPI/Auth/USER_LOADED\";\n\nexport const CLEAR_ERROR_STATE = \"handrangeAPI/Auth/CLEAR_ERROR_STATE\";\nexport const AUTH_CHECK_STATE = \"handrangeAPI/Auth/AUTH_CHECK_STATE\";\n\nexport const INIT_REGISTER_USER = \"handrangeAPI/Auth/INIT_REGISTER_USER\";\nexport const REGISTER_USER_SUCCESS = \"handrangeAPI/Auth/REGISTER_USER_SUCCESS\";\nexport const REGISTER_USER_FAIL = \"handrangeAPI/Auth/REGISTER_USER_FAIL\";\n","import produce from \"immer\";\nimport {\n  USER_SIGNIN,\n  USER_SIGNIN_SUCCESS,\n  USER_SIGNIN_FAIL,\n  CLEAR_ERROR_STATE,\n  USER_LOADED,\n  USER_SIGNOUT_SUCCESS,\n  INIT_REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL\n} from \"./constants\";\n\nexport const initialState = {\n  loading: false,\n  error: { invalid: false, message: null },\n  email: false,\n  name: false,\n  token: null,\n  id: false\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst authReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case USER_SIGNIN:\n        draft.loading = true;\n        draft.data = false;\n        draft.token = null;\n        draft.error.invalid = false;\n        draft.error.message = null;\n        break;\n\n      case USER_SIGNIN_SUCCESS:\n        draft.loading = false;\n        draft.token = action.token;\n        break;\n\n      case USER_LOADED:\n        console.log(action.user);\n        draft.email = action.user.email;\n        draft.name = action.user.name;\n        draft.id = action.user.id;\n        break;\n\n      case USER_SIGNIN_FAIL:\n        draft.loading = false;\n        draft.error.invalid = true;\n        draft.error.message = action.error;\n        break;\n\n      case CLEAR_ERROR_STATE:\n        draft.error.invalid = false;\n        draft.error.message = null;\n        break;\n\n      case USER_SIGNOUT_SUCCESS:\n        draft.data = false;\n        draft.token = null;\n        break;\n\n      case INIT_REGISTER_USER:\n        draft.loading = true;\n        draft.params = action.user;\n        break;\n\n      case REGISTER_USER_SUCCESS:\n        draft.loading = false;\n        break;\n\n      case REGISTER_USER_FAIL:\n        draft.loading = false;\n        draft.error.invalid = true;\n        draft.error.message = action.error;\n        break;\n    }\n  });\n\nexport default authReducer;\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport history from \"./utils/history\";\nimport globalReducer from \"./containers/MainPage/reducer\";\nimport authReducer from \"./containers/Auth/reducer\";\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    user: authReducer,\n    router: connectRouter(history),\n    ...injectedReducers\n  });\n\n  return rootReducer;\n} //?\n","import invariant from \"invariant\";\nimport { isEmpty, isFunction, isString } from \"lodash\";\n\nimport checkStore from \"./checkStore\";\nimport createReducer from \"../reducers\";\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      \"(app/utils...) injectReducer: Expected `reducer` to be a reducer function\"\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}\n","import React from \"react\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { ReactReduxContext } from \"react-redux\";\n\nimport getInjectors from \"./reducerInjectors\";\n\n/**\n * Dynamically injects a reducer\n *\n * @param {string} key A key of the reducer\n * @param {function} reducer A reducer that will be injected\n *\n */\nexport default ({ key, reducer }) => WrappedComponent => {\n  class ReducerInjector extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withReducer(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      \"Component\"})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      getInjectors(context.store).injectReducer(key, reducer);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\n};\n\nconst useInjectReducer = ({ key, reducer }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    getInjectors(context.store).injectReducer(key, reducer);\n  }, []);\n};\n\nexport { useInjectReducer };\n","import React, { Fragment, useState, useEffect, memo } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { Header, Table, Tab, Button } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport useInjectReducer from \"../../../HOC/useInjectReducer\";\n\nimport reducer from \"../reducer\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport {\n  makeSelectDeadcards,\n  makeSelectMode,\n  makeSelectSelectedStreet\n} from \"../selectors\";\n\nconst key = \"global\";\n\nconst StyledContainer = styled(Container)`\n  font-size: 1rem;\n`;\n\nconst StyledGreenRow = styled(Table.Row)`\n  color: black;\n  background-color: #8bddbe;\n`;\n\nconst StyledVioletRow = styled(Table.Row)`\n  color: black;\n  background-color: #ed87a7;\n`;\n\nconst StyledBlueRow = styled(Table.Row)`\n  color: black;\n  background-color: #6b6c7c;\n`;\n\nconst StyledRedRow = styled(Table.Row)`\n  color: black;\n  background-color: #d3d3d3;\n`;\n\nconst StyledInvertedHeader = styled(Table.Header)`\n  color: white;\n  background-color: black;\n`;\nconst StyledInvertedRow = styled(Table.Row)`\n  color: white;\n  background-color: black;\n`;\n//TODO: Make a board legend for Preflop/Flop/Turn/River\n\nconst legendTable = (\n  numberOfCombos,\n  nameOfAction,\n  onHandleStreetHandlerButtons,\n  street,\n  streetActions\n) => (\n  <Table unstackable>\n    <Table.Body>\n      <StyledInvertedRow>\n        <Table.HeaderCell>Name</Table.HeaderCell>\n        <Table.HeaderCell>Range # Combos</Table.HeaderCell>\n        <Table.HeaderCell>% of Range</Table.HeaderCell>\n        <Table.HeaderCell>% of Hands</Table.HeaderCell>\n      </StyledInvertedRow>\n      <StyledGreenRow>\n        <Table.Cell>{streetActions[0]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[0]}</Table.Cell>\n        <Table.Cell id=\"Raise4BetValueTutorial\">\n          {(\n            (100 * numberOfCombos[0]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2) || 0}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[0] / 1326) * 100).toFixed(2)}</Table.Cell>\n      </StyledGreenRow>\n      <StyledVioletRow>\n        <Table.Cell>{streetActions[1]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[1]}</Table.Cell>\n        <Table.Cell id=\"Raise4BetBluffTutorial\">\n          {(\n            (100 * numberOfCombos[1]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[1] / 1326) * 100).toFixed(2)}</Table.Cell>\n      </StyledVioletRow>\n      <StyledBlueRow>\n        <Table.Cell>{streetActions[2]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[2]}</Table.Cell>\n        <Table.Cell>\n          {(\n            (100 * numberOfCombos[2]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[2] / 1326) * 100).toFixed(2)}</Table.Cell>\n      </StyledBlueRow>\n      <StyledRedRow>\n        <Table.Cell>{streetActions[3]}</Table.Cell>\n        <Table.Cell>{numberOfCombos[3]}</Table.Cell>\n        <Table.Cell>\n          {(\n            (100 * numberOfCombos[3]) /\n            (numberOfCombos[0] +\n              numberOfCombos[1] +\n              numberOfCombos[2] +\n              numberOfCombos[3])\n          ).toFixed(2)}\n        </Table.Cell>\n        <Table.Cell>{((numberOfCombos[3] / 1326) * 100).toFixed(2)}</Table.Cell>\n      </StyledRedRow>\n      <StyledInvertedRow>\n        <Table.Cell>Total</Table.Cell>\n        <Table.Cell>\n          {numberOfCombos[0] +\n            numberOfCombos[1] +\n            numberOfCombos[2] +\n            numberOfCombos[3]}\n        </Table.Cell>\n        <Table.Cell></Table.Cell>\n        <Table.Cell>\n          {(\n            (100 *\n              (numberOfCombos[0] +\n                numberOfCombos[1] +\n                numberOfCombos[2] +\n                numberOfCombos[3])) /\n            1326\n          ).toFixed(2)}\n        </Table.Cell>\n      </StyledInvertedRow>\n    </Table.Body>\n  </Table>\n);\n\nconst comboCounter = (hand, chosenStreet, board) => {\n  let filteredBoard = [];\n  if (chosenStreet == \"Flop\" && board.length >= 3)\n    filteredBoard = [board[0].trim(), board[1].trim(), board[2].trim()];\n  else if (chosenStreet == \"Turn\" && board.length >= 4)\n    filteredBoard = [\n      board[0].trim(),\n      board[1].trim(),\n      board[2].trim(),\n      board[3].trim()\n    ];\n  else if (chosenStreet == \"River\" && board.length >= 5)\n    filteredBoard = [\n      board[0].trim(),\n      board[1].trim(),\n      board[2].trim(),\n      board[3].trim(),\n      board[4].trim()\n    ];\n  //Suited Combos\n  if (hand.indexOf(\"s\") >= 0) {\n    let filteredBoardCards = filteredBoard.map(boardCard =>\n      boardCard.charAt(0)\n    );\n    let specificHands = [\n      hand.charAt(0) + \"s\" + hand.charAt(1) + \"s\",\n      hand.charAt(0) + \"c\" + hand.charAt(1) + \"c\",\n      hand.charAt(0) + \"d\" + hand.charAt(1) + \"d\",\n      hand.charAt(0) + \"h\" + hand.charAt(1) + \"h\"\n    ];\n    let addCombos = filteredBoard.reduce((acc, boardCard) => {\n      let totalHands = specificHands.reduce((acc2, specificCards) => {\n        if (specificCards.indexOf(boardCard) >= 0) {\n          return [...acc2, specificCards];\n        } else return acc2;\n      }, [])[0];\n      if (totalHands) return { ...acc, [totalHands]: 0 };\n      else return { ...acc };\n    }, 0);\n    return 4 - Object.keys(addCombos).length;\n  }\n  //Offsuit Combos\n  else if (hand.indexOf(\"o\") >= 0) {\n    let numOccurances = _.countBy(_.split(board, \"\", 12));\n    let subtractFirstCard = numOccurances[hand.charAt(0)] || 0;\n    let subtractSecondCard = numOccurances[hand.charAt(1)] || 0;\n    let numCards = (4 - subtractFirstCard) * (4 - subtractSecondCard) - 4;\n    return numCards;\n  } else {\n    //Pair Combos\n    let numOccurances = _.countBy(_.split(board, \"\", 12));\n    let subtractFirstCard = numOccurances[hand.charAt(0)] || 0;\n    let subtractSecondCard = numOccurances[hand.charAt(1)] || 0;\n\n    let numCards = ((4 - subtractFirstCard) * (3 - subtractSecondCard)) / 2;\n    return numCards;\n  }\n};\n\nexport const countHandCombo = (wholeRange, chosenStreet, board) => {\n  let wholeRangeFiltered = wholeRange.filter(\n    ({ hands, Street }) => chosenStreet == Street\n  );\n  let wholeRangeNum = wholeRangeFiltered.map(({ hands }) => {\n    return hands.reduce((acc, hand) => {\n      return acc + comboCounter(hand, chosenStreet, board);\n    }, 0);\n  });\n\n  console.log(wholeRangeFiltered);\n  return wholeRangeNum;\n};\n\nconst BoardLegend = ({\n  wholeRange,\n  onHandleStreetHandler,\n  onHandleStreetHandlerButtons,\n  mode,\n  deadcards\n}) => {\n  useInjectReducer({ key, reducer });\n  const streetActions = {\n    Preflop: [\"Raise4BetCall\", \"Raise4BetFold\", \"RaiseCall\", \"RaiseFold\"],\n    Flop: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"],\n    Turn: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"],\n    River: [\"Valuebet\", \"Bluff\", \"CheckCall\", \"CheckFold\"]\n  };\n\n  console.log(mode.street);\n  const [numberOfCombos, updateNumberOfCombos] = useState([0, 0, 0, 0]);\n\n  //TODO: potential bug? method outside useEffect\n  useEffect(() => {\n    updateNumberOfCombos(countHandCombo(wholeRange, mode.street, deadcards));\n  }, [wholeRange, mode.street, deadcards]);\n\n  const panes = [\n    {\n      menuItem: \"Preflop\",\n      name: \"Preflop\",\n      value: \"Raise4BetCall\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}{\" \"}\n        </Fragment>\n      )\n    },\n    {\n      menuItem: \"Flop\",\n      name: \"Flop\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      )\n    },\n    {\n      menuItem: \"Turn\",\n      name: \"Turn\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      )\n    },\n    {\n      menuItem: \"River\",\n      name: \"River\",\n      value: \"Valuebet\",\n      render: () => (\n        <Fragment>\n          {legendTable(\n            numberOfCombos,\n            nameOfAction,\n            onHandleStreetHandlerButtons,\n            mode.street,\n            streetActions[mode.street]\n          )}\n        </Fragment>\n      )\n    }\n  ];\n  const nameOfAction = comboNumber => {\n    if (mode.street && wholeRange[mode.street] !== undefined)\n      return Object.keys(wholeRange[mode.street])[comboNumber];\n    else return \"\";\n  };\n\n  return (\n    <StyledContainer>\n      {legendTable(\n        numberOfCombos,\n        nameOfAction,\n        onHandleStreetHandlerButtons,\n        mode.street,\n        streetActions[mode.street]\n      )}\n    </StyledContainer>\n  );\n};\n\nconst mapStateToProps = () => {\n  const getDeadcards = makeSelectDeadcards();\n  const getMode = makeSelectMode();\n  const getSelectedRange = makeSelectSelectedStreet();\n\n  const mapState = state => {\n    return {\n      deadcards: getDeadcards(state),\n      mode: getMode(state),\n      wholeRange: getSelectedRange(state)\n    };\n  };\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\nexport default compose(withConnect, memo)(BoardLegend);\n","import {\n  SET_HAND_RANGE,\n  SET_HAND_RANGE_SELECT,\n  INIT_ALL_USER_HAND_RANGES,\n  ALL_USER_HAND_RANGES_SUCCESS,\n  ALL_USER_HAND_RANGES_FAIL,\n  INIT_CREATE_NEW_FOLDER,\n  CREATE_NEW_FOLDER_SUCCESS,\n  CREATE_NEW_FOLDER_FAIL,\n  SET_HAND_RANGE_GROUP,\n  SET_DYNAMIC_FOLDER_INFO,\n  SAVE_AND_LOAD,\n  LOAD_NEW_FOLDER,\n  SET_DEAD_CARDS,\n  GET_DEAD_CARDS,\n  SET_IS_IP,\n  LOAD_EQUITIES,\n  LOAD_EQUITIES_SUCCESS\n} from \"./constants\";\n\nexport function setHandRangeSelect(data) {\n  return {\n    type: SET_HAND_RANGE_SELECT,\n    data\n  };\n}\n\nexport function setHandRange(data) {\n  return {\n    type: SET_HAND_RANGE,\n    data\n  };\n}\n\nexport function initAllUserHandRanges() {\n  return {\n    type: INIT_ALL_USER_HAND_RANGES\n  };\n}\n\nexport function setDeadCards(data) {\n  return {\n    type: SET_DEAD_CARDS,\n    data\n  };\n}\n\nexport function setIsIP(data) {\n  return {\n    type: SET_IS_IP,\n    data\n  };\n}\n\nexport function loadEquities() {\n  return {\n    type: LOAD_EQUITIES\n  };\n}\n\n//TODO: Implement this\n// export function loadEquitiesSuccess(data) {\n//   return {\n//     type: LOAD_EQUITIES_SUCCESS,\n//     data,\n//   };\n// }\n","export const RESTART_ON_REMOUNT = \"@@saga-injector/restart-on-remount\";\nexport const DAEMON = \"@@saga-injector/daemon\";\nexport const ONCE_TILL_UNMOUNT = \"@@saga-injector/once-till-unmount\";\n","import invariant from \"invariant\";\nimport { isEmpty, isFunction, isString, conformsTo } from \"lodash\";\n\nimport checkStore from \"./checkStore\";\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from \"./constants\";\n\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nconst checkKey = key =>\n  invariant(\n    isString(key) && !isEmpty(key),\n    \"(app/utils...) injectSaga: Expected `key` to be a non empty string\"\n  );\n\nconst checkDescriptor = descriptor => {\n  const shape = {\n    saga: isFunction,\n    mode: mode => isString(mode) && allowedModes.includes(mode)\n  };\n  invariant(\n    conformsTo(descriptor, shape),\n    \"(app/utils...) injectSaga: Expected a valid saga descriptor\"\n  );\n};\n\nexport function injectSagaFactory(store, isValid) {\n  return function injectSaga(key, descriptor = {}, args) {\n    if (!isValid) checkStore(store);\n\n    const newDescriptor = {\n      ...descriptor,\n      mode: descriptor.mode || DAEMON\n    };\n    const { saga, mode } = newDescriptor;\n\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n\n    let hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      const oldDescriptor = store.injectedSagas[key];\n      // enable hot reloading of daemon and once-till-unmount sagas\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (\n      !hasSaga ||\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\n    ) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = {\n        ...newDescriptor,\n        task: store.runSaga(saga, args)\n      };\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\n\nexport function ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      const descriptor = store.injectedSagas[key];\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel();\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\n        if (process.env.NODE_ENV === \"production\") {\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\n          store.injectedSagas[key] = \"done\"; // eslint-disable-line no-param-reassign\n        }\n      }\n    }\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n","import React from \"react\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { ReactReduxContext } from \"react-redux\";\n\nimport getInjectors from \"./sagaInjectors\";\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\nexport default ({ key, saga, mode }) => WrappedComponent => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${WrappedComponent.displayName ||\n      WrappedComponent.name ||\n      \"Component\"})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };\n","/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  return fetch(url, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import { call, put, all, takeLatest, cancelled } from \"redux-saga/effects\";\nimport qs from \"qs\";\n\nimport { INIT_ALL_USER_HAND_RANGES, INIT_CREATE_NEW_FOLDER } from \"./constants\";\nimport { allUserHandRangesSuccess, allUserHandRangesFail } from \"./actions\";\nimport request from \"../../utils/request\";\nimport { INIT_REGISTER_USER } from \"../Auth/constants\";\n\nlet baseURL;\n\nif (process.env.NODE_ENV !== \"production\")\n  baseURL = `${process.env.REACT_APP_API_URL}`;\nelse baseURL = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* handData() {}\n","import React, { Fragment } from \"react\";\n\nconst ProductDescription = () => {\n  return (\n    <Fragment>\n      <h2>Hand Range Display Application</h2>\n      <p>\n        This application allows you to track what hands you are playing from\n        different positions in Texas Holdem Poker. Click a street on the left,\n        and then select a betting pattern. For example, you could select flop,\n        then Valuebet, Bluff, Check Fold, or Check Call.\n      </p>\n      <p>\n        You can then select different hands to fit into your poker hand range.\n        Once you have completed filling out the hand ranges you can then look at\n        the legend to see how your range is divided between the different\n        actions.\n      </p>\n    </Fragment>\n  );\n};\n\nexport default ProductDescription;\n","import React, { Fragment, useEffect, useState, memo } from \"react\";\nimport { Button, Container, Table, Image } from \"semantic-ui-react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport styled from \"styled-components\";\nimport { makeSelectDeadcards } from \"../selectors\";\n\nconst styledCardBack = styled.img``;\n\nconst StyledCol = styled(Col)`\n  display: flex;\n  justify-content: center;\n  padding: 0px !important;\n`;\n\nconst BoardCard = (displayCard, idx) => (\n  <Image size=\"mini\" id={\"Board\" + idx + \"Card\"} alt=\"card\" src={displayCard} />\n);\n\nconst StyledRow = styled(Row)``;\n//TODO: buttons that add two tone/rainbow/monotone/paired/HLL/etc.\nconst BoardCards = ({ deadcards = [] }) => {\n  return (\n    <Table>\n      <StyledRow>\n        <Col className=\"text-center\">Flop</Col>\n        <Col className=\"text-center\">Turn</Col>\n        <Col className=\"text-center\">River</Col>\n      </StyledRow>\n      <StyledRow>\n        <StyledCol>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 0 &&\n          deadcards[0].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[0].toUpperCase().trim() + \".png\",\n                0\n              )\n            : BoardCard(\"/assets/cards/back.png\", 0)}\n\n          {Array.isArray(deadcards) &&\n          deadcards.length > 1 &&\n          deadcards[1].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[1].toUpperCase().trim() + \".png\",\n                1\n              )\n            : BoardCard(\"/assets/cards/back.png\", 1)}\n\n          {Array.isArray(deadcards) &&\n          deadcards.length > 2 &&\n          deadcards[2].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[2].toUpperCase().trim() + \".png\",\n                2\n              )\n            : BoardCard(\"/assets/cards/back.png\", 2)}\n        </StyledCol>\n        <StyledCol xs={2}>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 3 &&\n          deadcards[3].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[3].toUpperCase().trim() + \".png\",\n                3\n              )\n            : BoardCard(\"/assets/cards/back.png\", 3)}\n        </StyledCol>\n        <StyledCol>\n          {Array.isArray(deadcards) &&\n          deadcards.length > 4 &&\n          deadcards[4].length > 1\n            ? BoardCard(\n                \"/assets/cards/\" + deadcards[4].toUpperCase().trim() + \".png\",\n                4\n              )\n            : BoardCard(\"/assets/cards/back.png\", 4)}\n        </StyledCol>\n      </StyledRow>\n    </Table>\n  );\n};\n\nconst mapStateToProps = () => {\n  const getDeadcards = makeSelectDeadcards();\n\n  const mapState = (state) => {\n    return {\n      deadcards: getDeadcards(state),\n    };\n  };\n  return mapState;\n}; //?\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(BoardCards);\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nconst InputStreet = ({ onHandleStreetHandler, street }) => {\n  return (\n    <Button.Group>\n      <Button\n        onClick={onHandleStreetHandler}\n        id=\"streetFirstChoice\"\n        name=\"Preflop\"\n        value=\"Raise4BetCall\"\n        active={street == \"Preflop\"}\n        inverted\n        color=\"blue\"\n      >\n        Preflop\n      </Button>\n      <Button.Or />\n      <Button\n        onClick={onHandleStreetHandler}\n        id=\"streetSecondChoice\"\n        name=\"Flop\"\n        value=\"Valuebet\"\n        active={street == \"Flop\"}\n        inverted\n        color=\"blue\"\n      >\n        Flop\n      </Button>\n      <Button.Or />\n      <Button\n        onClick={onHandleStreetHandler}\n        id=\"streetThirdChoice\"\n        name=\"Turn\"\n        value=\"Valuebet\"\n        active={street == \"Turn\"}\n        inverted\n        color=\"blue\"\n      >\n        Turn\n      </Button>\n      <Button.Or />\n      <Button\n        onClick={onHandleStreetHandler}\n        id=\"streetFourthChoice\"\n        name=\"River\"\n        value=\"Valuebet\"\n        active={street == \"River\"}\n        inverted\n        color=\"blue\"\n      >\n        River\n      </Button>\n    </Button.Group>\n  );\n};\n\nexport default InputStreet;\n","import React, { Fragment } from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nconst InputStreetAction = ({\n  street,\n  streetAction,\n  onHandleStreetHandlerButtons,\n}) => {\n  return street == \"Preflop\" ? (\n    <Fragment>\n      <Button.Group inverted fluid>\n        <Button\n          inverted\n          color=\"green\"\n          id=\"firstChoice\"\n          active={streetAction == \"Raise4BetCall\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"Raise4BetCall\",\n            })\n          }\n        >\n          Raise/4bet/Call\n        </Button>\n        <Button.Or />\n        <Button\n          inverted\n          color=\"red\"\n          id=\"secondChoice\"\n          active={streetAction == \"Raise4BetFold\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"Raise4BetFold\",\n            })\n          }\n        >\n          Raise/4bet/Fold\n        </Button>\n        <Button.Or />\n      </Button.Group>\n      <Button.Group inverted fluid>\n        <Button\n          inverted\n          color=\"black\"\n          id=\"thirdChoice\"\n          active={streetAction == \"RaiseCall\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"RaiseCall\",\n            })\n          }\n        >\n          Raise/Call\n        </Button>\n        <Button.Or />\n        <Button\n          inverted\n          color=\"white\"\n          id=\"fourthChoice\"\n          active={streetAction == \"RaiseFold\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"RaiseFold\",\n            })\n          }\n        >\n          Raise/Fold\n        </Button>\n      </Button.Group>\n    </Fragment>\n  ) : (\n    <Fragment>\n      <Button.Group>\n        <Button\n          inverted\n          color=\"green\"\n          id=\"firstChoice\"\n          active={streetAction == \"Valuebet\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"Valuebet\",\n            })\n          }\n        >\n          Valuebet\n        </Button>\n        <Button.Or />\n        <Button\n          inverted\n          color=\"red\"\n          id=\"secondChoice\"\n          active={streetAction == \"Bluff\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"Bluff\",\n            })\n          }\n        >\n          Bluff\n        </Button>\n        <Button.Or />\n      </Button.Group>\n      <Button.Group inverted fluid>\n        <Button\n          inverted\n          color=\"black\"\n          id=\"thirdChoice\"\n          active={streetAction == \"CheckCall\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"CheckCall\",\n            })\n          }\n        >\n          Check/Call\n        </Button>\n        <Button.Or />\n        <Button\n          inverted\n          color=\"white\"\n          id=\"fourthChoice\"\n          active={streetAction == \"CheckFold\"}\n          onClick={(e) =>\n            onHandleStreetHandlerButtons(e, {\n              street,\n              streetAction: \"CheckFold\",\n            })\n          }\n        >\n          Check/Fold\n        </Button>\n      </Button.Group>\n    </Fragment>\n  );\n};\n\nexport default InputStreetAction;\n","import React, { Fragment, useState, memo } from \"react\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport {\n  Grid,\n  Segment,\n  Form,\n  Button,\n  Progress,\n  Label,\n  Step,\n  Icon\n} from \"semantic-ui-react\";\nimport BoardCards from \"./BoardCards\";\nimport { setDeadCards, setIsIP, loadEquities } from \"../actions\";\nimport { compose } from \"redux\";\nimport { connect, useDispatch } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport {\n  makeSelectRangeRepoIP,\n  makeSelectRangeRepoOOP,\n  makeSelectRange,\n  makeSelectPosition,\n  makeSelectMode,\n  makeSelectDeadcards\n} from \"../selectors\";\nimport InputStreet from \"./InputStreet\";\nimport InputStreetAction from \"./InputStreetAction\";\n\nconst options = [\n  { key: \"positionOOP\", text: \"OOP\", value: false },\n  { key: \"positionIP\", text: \"IP\", value: true }\n];\n\nconst DeadCards = styled(Form.Input)`\n  width: 100%;\n`;\n// TODO: Add functionality to assign, ranges, clear selection, clear suits, split suits\nconst InputForm = ({\n  onHandleStreetHandler,\n  onHandleStreetHandlerButtons,\n  mode: { street, streetAction, isIP },\n  selectedRanges,\n  rangeRepoOOP,\n  rangeRepoIP,\n  deadcards,\n  ranges\n}) => {\n  const dispatch = useDispatch();\n  const onChangeStreetHandler = e => {\n    dispatch(setDeadCards(_.split(e.target.value, \",\", 12)));\n  };\n\n  const onChangePosition = (e, { value }) => {\n    let newRangeIP, newRangeOOP, newRanges;\n    if (value) {\n      newRanges = rangeRepoIP;\n      newRangeIP = rangeRepoIP;\n      newRangeOOP = selectedRanges;\n    } else {\n      newRanges = rangeRepoOOP;\n      newRangeIP = selectedRanges;\n      newRangeOOP = rangeRepoOOP;\n    }\n\n    dispatch(setIsIP({ position: value, newRangeIP, newRangeOOP, newRanges }));\n  };\n\n  const onCalculateEquities = () => dispatch(loadEquities());\n\n  return (\n    <div>\n      <Segment.Group inverted stacked size=\"massive\">\n        <Segment.Group inverted color=\"green\">\n          <Label\n            ribbon\n            color={\n              deadcards.length >= 3 && deadcards.length <= 5 ? \"green\" : \"red\"\n            }\n          >\n            {deadcards.length >= 3 && deadcards.length <= 5 ? (\n              <Icon name=\"thumbs up\" />\n            ) : (\n              <Icon name=\"thumbs down\" />\n            )}\n            Board\n          </Label>\n          <Segment>\n            <DeadCards\n              placeholder=\"eg. Ah, As, 2c, 4d\"\n              name=\"deadcards\"\n              onChange={onChangeStreetHandler}\n            />\n            <BoardCards />\n          </Segment>\n        </Segment.Group>\n        <Segment.Group>\n          <Label ribbon color=\"black\">\n            Position\n          </Label>\n          <Segment>\n            <Button.Group>\n              <Button\n                name=\"Position\"\n                value={true}\n                active={isIP}\n                inverted\n                color=\"blue\"\n                onClick={onChangePosition}\n              >\n                In Position\n              </Button>\n              <Button.Or />\n              <Button\n                name=\"Position\"\n                value={false}\n                active={!isIP}\n                inverted\n                color=\"blue\"\n                onClick={onChangePosition}\n              >\n                Out Of Position\n              </Button>\n            </Button.Group>\n          </Segment>\n        </Segment.Group>\n        <Segment.Group>\n          <Label color=\"black\" ribbon>\n            Street\n          </Label>\n          <Segment>\n            <InputStreet\n              onHandleStreetHandler={onHandleStreetHandler}\n              street={street}\n            />\n          </Segment>\n        </Segment.Group>\n        <Segment.Group>\n          <Label color=\"black\" ribbon>\n            Action\n          </Label>\n          <Segment>\n            <InputStreetAction\n              street={street}\n              streetAction={streetAction}\n              onHandleStreetHandlerButtons={onHandleStreetHandlerButtons}\n            />\n          </Segment>\n        </Segment.Group>\n        <Segment.Group>\n          <Segment textAlign=\"center\">\n            <Button color=\"purple\" onClick={() => onCalculateEquities()}>\n              Calculate Equities\n            </Button>\n          </Segment>\n        </Segment.Group>\n      </Segment.Group>\n    </div>\n  );\n};\nconst mapStateToProps = () => {\n  const getRange = makeSelectRange();\n  const getRangeRepoIP = makeSelectRangeRepoIP();\n  const getRangeRepoOOP = makeSelectRangeRepoOOP();\n  const getPosition = makeSelectPosition();\n  const getMode = makeSelectMode();\n  const getDeadcards = makeSelectDeadcards();\n  const getRanges = makeSelectRange();\n\n  const mapState = state => {\n    return {\n      selectedRanges: getRange(state),\n      rangeRepoIP: getRangeRepoIP(state),\n      rangeRepoOOP: getRangeRepoOOP(state),\n      Position: getPosition(state),\n      mode: getMode(state),\n      deadcards: getDeadcards(state)\n    };\n  };\n  return mapState;\n}; //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(InputForm);\n","import React from \"react\";\nimport { Segment, Step, Icon } from \"semantic-ui-react\";\n\nconst ProgressIndicator = ({ street, handsIPUsed, handsOOPUsed }) => {\n  return (\n    <Segment inverted stacked size=\"tiny\">\n      <Step.Group fluid size=\"tiny\">\n        <Step completed={handsIPUsed}>\n          <Icon name=\"thumbs down\" color=\"red\" />\n          <Step.Content>\n            <Step.Description>\n              Hands for IP Selected on {street}\n            </Step.Description>\n          </Step.Content>\n        </Step>\n        <Step completed={handsOOPUsed}>\n          <Icon name=\"thumbs down\" color=\"red\" />\n          <Step.Content>\n            <Step.Description>\n              Hands for OOP Selected on {street}\n            </Step.Description>\n          </Step.Content>\n        </Step>\n      </Step.Group>\n    </Segment>\n  );\n};\n\nexport default ProgressIndicator;\n","import React, { useState, useEffect, memo, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport Board from \"./Board\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport prange from \"prange\";\nimport { Row, Col, Container, PopoverTitle } from \"react-bootstrap\";\nimport BoardLegend from \"./BoardLegend/BoardLegend\";\nimport {\n  makeSelectRange,\n  makeSelectSelectedRanges,\n  makeSelectMode,\n  makeSelectDeadcards,\n  makeSelectRangeRepoIP,\n  makeSelectRangeRepoOOP,\n} from \"./selectors\";\nimport {\n  setHandRangeSelect,\n  setHandRange,\n  initAllUserHandRanges,\n} from \"./actions\";\n\nimport reducer from \"./reducer\";\nimport { useInjectReducer } from \"../../HOC/useInjectReducer\";\nimport { useInjectSaga } from \"../../HOC/injectSaga\";\nimport saga from \"./saga\";\n\nimport ProductDescription from \"./ProductDescription/index\";\nimport { Grid, Segment, Step, Icon } from \"semantic-ui-react\";\nimport InputForm from \"./InputForm\";\nimport styled from \"styled-components\";\n\nimport { mapNewHandRange } from \"./stateRangeFunctions\";\nimport ProgressIndicator from \"./ProgressIndicator\";\n\nconst MainPageContainer = styled.div`\n  display: block;\n  padding: 0px !important;\n\n  @media (min-width: 1200px) {\n    display: flex;\n  }\n`;\n\nconst LeftPane = styled.div`\n  padding: 0px !important;\n  @media (min-width: 1200px) {\n    margin: 25px;\n  }\n`;\n\nconst RightPane = styled.div`\n  padding: 0px;\n  @media (min-width: 1200px) {\n    margin: 25px;\n  }\n`;\n\nconst key = \"global\";\n//TO-DO: Rounded corners on navigation bar, spaces on buttons, more whitespace, needs instructions\n\nexport const handsInRange = (inpRange, street) => {\n  console.log(inpRange);\n  if (inpRange.length == 0) return false;\n  let handsInRange = inpRange.filter(\n    ({ Street, hands }) => hands.length > 0 && Street == street\n  );\n  const isHandsSelected = handsInRange.length > 0;\n\n  return isHandsSelected;\n};\n\nconst MainPage = ({\n  wholeRange,\n  ranges,\n  rangeColors,\n  toAllUserHandRange,\n  mode,\n  mode: { street, streetAction, isIP },\n  board,\n  rangeRepoIP,\n  rangeRepoOOP,\n}) => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n  const [handsIPUsed, setHandsIPUsed] = useState(\n    handsInRange(rangeRepoIP, street)\n  );\n  const [handsOOPUsed, setHandsOOPUsed] = useState(\n    handsInRange(rangeRepoIP, street)\n  );\n\n  useEffect(() => {\n    setHandsIPUsed(handsInRange(isIP ? ranges : rangeRepoIP, street));\n    setHandsOOPUsed(handsInRange(!isIP ? ranges : rangeRepoOOP, street));\n  }, [ranges, rangeRepoIP, street]);\n\n  useEffect(() => {\n    toAllUserHandRange();\n  }, [toAllUserHandRange]);\n\n  const onHandleStreetHandler = (e, { name, value }) => {\n    dispatch(\n      setHandRangeSelect({\n        name,\n        value,\n      })\n    );\n  };\n\n  const onHandleStreetHandlerButtons = (e, { street, streetAction }) => {\n    dispatch(setHandRangeSelect({ name: street, value: streetAction }));\n  };\n\n  const onMouseOverHandler = (data) => {\n    if (data.onMouseDownEvent) {\n      let newHandRange = mapNewHandRange(\n        ranges,\n        street,\n        streetAction,\n        data.cards\n      );\n      dispatch(setHandRange(newHandRange));\n    }\n    return data.cards;\n  };\n\n  //TO-DO: need to align these left-to-right on big screens, top-to-bottom mobile\n  return (\n    <Fragment>\n      <LeftPane>\n        <ProgressIndicator\n          street={street}\n          handsIPUsed={handsIPUsed}\n          handsOOPUsed={handsOOPUsed}\n        />\n        <Board\n          onMouseOverHandler={onMouseOverHandler}\n          rangeColors={rangeColors}\n        ></Board>\n        <BoardLegend\n          onHandleStreetHandler={onHandleStreetHandler}\n          onHandleStreetHandlerButtons={onHandleStreetHandlerButtons}\n          mode={mode}\n        />\n      </LeftPane>\n      <RightPane>\n        <InputForm\n          onHandleStreetHandler={onHandleStreetHandler}\n          onHandleStreetHandlerButtons={onHandleStreetHandlerButtons}\n        />\n      </RightPane>\n    </Fragment>\n  );\n};\nMainPage.propTypes = {\n  ranges: PropTypes.object,\n  mode: PropTypes.object,\n  rangeColors: PropTypes.object,\n};\n\nconst mapStateToProps = () => {\n  const getMapRange = makeSelectRange();\n  const getSelectRange = makeSelectSelectedRanges();\n  const getMode = makeSelectMode();\n  const getDeadcards = makeSelectDeadcards();\n  const getRangeRepoIP = makeSelectRangeRepoIP();\n  const getRangeRepoOOP = makeSelectRangeRepoOOP();\n\n  const mapState = (state) => {\n    return {\n      ranges: getMapRange(state),\n      wholeRange: getSelectRange(state), //TODO: change to streetname\n      mode: getMode(state),\n      board: getDeadcards(state),\n      rangeRepoIP: getRangeRepoIP(state),\n      rangeRepoOOP: getRangeRepoOOP(state),\n    };\n  };\n  return mapState;\n}; //?\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toAllUserHandRange: () => dispatch(initAllUserHandRanges()),\n  };\n};\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect, memo)(MainPage);\n","import initialState from \"./reducer\";\nimport { ranges } from \"./sampleData\";\n\nexport const mapNewHandRange = (\n  oldHandRange,\n  draftModeStreet,\n  draftModeStreetAction,\n  actionDataCards\n) =>\n  oldHandRange.map((rangeObj, idx) => {\n    let hasStreetAndCurrentBetType =\n      rangeObj.Street == draftModeStreet &&\n      rangeObj.BetType == draftModeStreetAction;\n    let hasHandInRange = rangeObj.hands.indexOf(actionDataCards) >= 0;\n    if (hasStreetAndCurrentBetType && hasHandInRange) {\n      let handsWithRemovedCards = JSON.parse(JSON.stringify(rangeObj.hands));\n      let indexHandInRange = handsWithRemovedCards.indexOf(actionDataCards);\n      let numberHandsToRemove = 1;\n      handsWithRemovedCards.splice(indexHandInRange, numberHandsToRemove);\n      return {\n        Street: rangeObj.Street,\n        BetType: rangeObj.BetType,\n        hands: handsWithRemovedCards\n      };\n    }\n    if (hasStreetAndCurrentBetType && !hasHandInRange)\n      return {\n        Street: rangeObj.Street,\n        BetType: rangeObj.BetType,\n        hands: [...rangeObj.hands, actionDataCards]\n      };\n\n    return { ...rangeObj, hands: rangeObj.hands };\n  });\n","import React, { Fragment } from \"react\";\n\nimport { Menu, Item, Button } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n// import { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Navbar = ({ username = false }) => {\n  // const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  return (\n    <Menu inverted>\n      <Menu.Item>\n        <NavLink to=\"/\">Home</NavLink>\n      </Menu.Item>\n      {/* {isAuthenticated != false ? ( */}\n      {false ? (\n        <Fragment>\n          <Menu.Item>{username ? username : \"\"}</Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/donate\">Donate</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            {/* <Button onClick={() => logout()}>Logout</Button> */}\n          </Menu.Item>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Menu.Item>\n            <NavLink to=\"/register\">Register</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            {/* <Button onClick={() => loginWithRedirect()}>Login</Button> */}\n          </Menu.Item>\n        </Fragment>\n      )}\n    </Menu>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\n\nconst StyledContainer = styled(Container)`\n  padding: 0px !important;\n  @media (min-width: 1200px) {\n    display: flex;\n    margin-top: 30px;\n    margin-bottom: 50px;\n  }\n`;\n\nconst MainContainer = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n\nexport default MainContainer;\n","import React, { useEffect, useState, useRef, Fragment, memo } from \"react\";\nimport \"./App.css\";\nimport MainPage from \"../MainPage/index\";\n// import { useStripe } from \"../../HOC/useStripe/useStripe\";\n// import { StripeProvider, Elements } from \"react-stripe-elements\";\nimport { BrowserRouter, Route, NavLink, Switch } from \"react-router-dom\";\nimport { Menu } from \"semantic-ui-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInjectReducer } from \"../../HOC/useInjectReducer\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport styled from \"styled-components\";\n\nimport reducer from \"../MainPage/reducer\";\nimport Navbar from \"../../components/NavBar\";\nimport MainContainer from \"../../components/MainContainer\";\n\nimport Tour from \"reactour\";\n\nconst key = \"global\";\n\nconst StyledFragment = styled.div`\n  background-color: #e2e3e6;\n`;\nconst steps = [\n  {\n    selector: \"button#firstChoice\",\n    content:\n      \"First pick your betting pattern, Raise/4Bet/Call, in this case you will select your strongest hands that you always raise with. Note: you may have to click back and forth to get the right button highlighted. \",\n  },\n  {\n    selector: \"button#colorButtonAA\",\n    content:\n      \"AA is by far the strongest hand in holdem, select this hand by turning the table column green to go in your strongest hand range \",\n  },\n  {\n    selector: \"button#secondChoice\",\n    content:\n      \"Next we are going to take one of our strongest hands and turn it into a bluff when someone raises us. Select Raise4BetFold next. \",\n  },\n  {\n    selector: \"button#colorButtonAQo\",\n    content:\n      \"AQo makes the perfect bluffing hand. Its strong enough to raise first in, and has cards that block the strongest hands in the game. Go ahead and select AQo.\",\n  },\n  {\n    selector: \"#Raise4BetValueTutorial\",\n    content:\n      \"How often are we bluffing raising just AA and AQo? Looks like we valuebet with aces 33% of the time!\",\n  },\n  {\n    selector: \"#Raise4BetBluffTutorial\",\n    content:\n      \"How often are we bluffing raising just AA and AQo? Looks like we bluff twice as often at 67% as much as we valuebet. This ratio is much too high, we should now add kings and AKs to our range to balance our range.\",\n  },\n  {\n    selector: \"button#firstChoice\",\n    content:\n      \"We better put more hands into our value range, so lets go ahead and select Raise4BetCall again. \",\n  },\n  {\n    selector: \"button#colorButtonKK , button#colorButtonAKs\",\n    content: \"You can select AKs, to balance out your range.\",\n  },\n  {\n    selector: \"#Raise4BetBluffTutorial\",\n    content:\n      \"This is fantastic, now we are only bluffing approximately less than half the time! If someone tries to rebluff our raise back at them, they will be greeted with an allin against a very strong hand much too often for this to be a profitable move\",\n  },\n];\nconst App = ({}) => {\n  useInjectReducer({ key, reducer });\n  // const [stripe, setStripe] = useState(null);\n  const username = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [isTourOpen, updateTourOpen] = useState(true);\n\n  const closeTour = () => updateTourOpen(false);\n\n  return (\n    <MainContainer>\n      {/* <Navbar username={user.name} /> */}\n      <MainPage />\n      <Tour steps={steps} isOpen={isTourOpen} onRequestClose={closeTour} />\n    </MainContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  // ranges: makeSelectRanges(),\n  // mode: makeSelectMode(),\n  // user: makeSelectUser()\n}); //?\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (error) {\n    // Ignore write errors\n  }\n};\n","/*\n * To add a new Action:\n * 1) Import your constant\n * 2) Add a function like this:\n *    export function yourAction(var) {\n *        return { type: YOUR_ACTION_CONSTANT, var: var }\n *    }\n */\n\nimport {\n  USER_SIGNIN,\n  USER_SIGNIN_SUCCESS,\n  USER_SIGNIN_FAIL,\n  CLEAR_ERROR_STATE,\n  USER_SIGNOUT,\n  USER_SIGNOUT_SUCCESS,\n  USER_REQUESTED,\n  USER_LOADED,\n  AUTH_CHECK_STATE,\n  USER_SIGNUP,\n  USER_SIGNUP_SUCCESS,\n  USER_SIGNUP_FAIL,\n  INIT_REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL\n} from \"./constants\";\n\nexport function userSignin(user) {\n  return {\n    type: USER_SIGNIN,\n    user\n  };\n}\n\nexport function userSigninSuccess(token) {\n  return {\n    type: USER_SIGNIN_SUCCESS,\n    token\n  };\n}\n\nexport function userSigninFail(error) {\n  return {\n    type: USER_SIGNIN_FAIL,\n    error\n  };\n}\n\nexport function requestUser(userid) {\n  return {\n    type: USER_REQUESTED,\n    userid\n  };\n}\n\nexport function userLoaded(user) {\n  return {\n    type: USER_LOADED,\n    user\n  };\n}\n\nexport function logout() {\n  return {\n    type: USER_SIGNOUT\n  };\n}\n\nexport function logoutSuccess() {\n  return {\n    type: USER_SIGNOUT_SUCCESS\n  };\n}\n\nexport function authCheckState() {\n  return {\n    type: AUTH_CHECK_STATE\n  };\n}\n\nexport function clearErrorState() {\n  return {\n    type: CLEAR_ERROR_STATE\n  };\n}\n\nexport function userSignup(user) {\n  return {\n    type: USER_SIGNUP,\n    user\n  };\n}\n\nexport function userSignupSuccess(user) {\n  return {\n    type: USER_SIGNUP_SUCCESS,\n    user\n  };\n}\n\nexport function userSignupFail(error) {\n  return {\n    type: USER_SIGNUP_FAIL,\n    error\n  };\n}\n\nexport function initRegisterUser(user) {\n  return {\n    type: INIT_REGISTER_USER,\n    user\n  };\n}\n\nexport function RegisterUserSuccess(data) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    data\n  };\n}\n\nexport function RegisterUserFail(data) {\n  return {\n    type: REGISTER_USER_FAIL,\n    data\n  };\n}\n","import { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport { push } from \"connected-react-router\";\nimport qs from \"qs\";\n\nimport request from \"../../utils/request\";\nimport {\n  USER_SIGNIN,\n  USER_REQUESTED,\n  AUTH_CHECK_STATE,\n  USER_SIGNOUT,\n  USER_SIGNUP,\n  INIT_REGISTER_USER\n} from \"./constants.js\";\nimport {\n  userSigninSuccess,\n  userSigninFail,\n  requestUser,\n  logout,\n  userLoaded,\n  logoutSuccess,\n  userSignupSuccess,\n  userSignupFail,\n  userSignin\n} from \"./actions\";\n\nlet baseURL;\n\nif (process.env.NODE_ENV !== \"production\")\n  baseURL = `${process.env.REACT_APP_API_URL}`;\nelse baseURL = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\nconst stripHtmlTags = str => {\n  if (str === null || str === \"\") return false;\n  str = str.toString();\n  return str.replace(/<[^>]*>/g, \"\");\n};\n\nexport function* logoutSaga() {\n  yield call([localStorage, \"removeItem\"], \"token\");\n  yield put(logoutSuccess());\n  yield put(push(\"/\"));\n}\n\nexport function* authStateSaga({ userid }) {\n  console.log(userid);\n  const requestURL = `${baseURL}/users/${userid}`;\n  const headers = {};\n  const token = yield localStorage.getItem(\"token\");\n\n  if (!token) {\n    yield put(logout());\n  } else {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  try {\n    // Call our request helper (see 'utils/request')\n    const response = yield call(request, requestURL, { headers });\n    yield put(userLoaded(response));\n  } catch (err) {\n    yield put(logout());\n  }\n}\n\nexport function* userSigninSaga({ user: { name, password } }) {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  const body = JSON.stringify({\n    name,\n    password\n  });\n\n  const requestParams = {\n    body,\n    headers,\n    method: \"POST\"\n  };\n\n  const requestURL = `${baseURL}/login`;\n\n  try {\n    const response = yield call(request, requestURL, requestParams);\n    const { user, token } = response;\n    console.log(user);\n    yield localStorage.setItem(\"token\", token);\n    yield put(requestUser(user.id));\n    yield put(userSigninSuccess(token));\n  } catch (error) {\n    try {\n      const err = yield error.response.json();\n      if (\n        err &&\n        (err.code === \"invalid_email\" ||\n          err.code === \"incorrect_password\" ||\n          err.code === \"invalid_username\")\n      ) {\n        yield put(userSigninFail(\"Wrong username or password.\"));\n      } else {\n        const message = yield stripHtmlTags(err.message);\n        yield put(userSigninFail(message));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\nexport function* userSignupSaga({ user }) {\n  const params = qs.stringify(user);\n  const requestURL = `${baseURL}/users?${params}`;\n\n  try {\n    let response = yield call(request, requestURL, { method: \"POST\" });\n    console.log(response);\n    yield put(userSignin(user));\n    yield put(userSigninSuccess(response));\n  } catch (error) {\n    try {\n      const err = yield error.response.json();\n      yield put(userSignupFail(err.message));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* userRoot() {\n  yield all([\n    takeLatest(USER_SIGNIN, userSigninSaga),\n    takeLatest(USER_REQUESTED, authStateSaga),\n    takeLatest(AUTH_CHECK_STATE, authStateSaga),\n    takeLatest(USER_SIGNOUT, logoutSaga),\n    takeLatest(INIT_REGISTER_USER, userSignupSaga)\n  ]);\n}\n","/**\n * The User state selectors\n */\n\nimport { createSelector } from \"reselect\";\nimport { initialState } from \"./reducer\";\n\nconst selectUser = state => state.user || initialState;\n\nconst selectRouter = state => state.router;\n\nconst makeSelectLoading = () =>\n  createSelector(selectUser, userState => userState.loading);\n\nconst makeSelectError = () =>\n  createSelector(selectUser, userState => userState.error);\n\nconst makeSelectLocation = () =>\n  createSelector(selectRouter, routerState => routerState.location);\n\nconst makeSelectToken = () =>\n  createSelector(selectUser, userState => userState.token);\n\nconst makeSelectUser = () => createSelector(selectUser, userState => userState);\n\nconst makeSelectParams = () =>\n  createSelector(selectUser, userState => userState.params);\n\nexport {\n  selectUser,\n  makeSelectLoading,\n  makeSelectError,\n  makeSelectLocation,\n  makeSelectToken,\n  makeSelectUser,\n  makeSelectParams\n};\n","import React, { useState, memo } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { useDispatch } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport reducer from \"../reducer.js\";\n\nimport saga from \"../saga.js\";\n\nimport { initRegisterUser } from \"../actions.js\";\nimport { makeSelectParams } from \"../selectors.js\";\n\nimport Navbar from \"../../../components/NavBar/index.js\";\nimport MainContainer from \"../../../components/MainContainer/index.js\";\nimport { useInjectReducer } from \"../../../HOC/useInjectReducer.js\";\nimport { useInjectSaga } from \"../../../HOC/injectSaga.js\";\n\nconst key = \"user\";\n\nconst UserRegister = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n  const [registerForm, updateRegisterForm] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password_confirmation: \"\"\n  });\n  const onChangeHandler = (e, { name, value }) => {\n    const newFormValues = { ...registerForm };\n    newFormValues[[name]] = value;\n    updateRegisterForm(newFormValues);\n  };\n\n  const onRegisterUserHandler = (e, data) => {\n    dispatch(initRegisterUser(registerForm));\n  };\n\n  return (\n    <MainContainer>\n      <Navbar />\n      <h2>User Register</h2>\n      <Form onSubmit={onRegisterUserHandler}>\n        <Form.Input\n          label=\"Username\"\n          name=\"name\"\n          placeholder=\"Username\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"Password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"Password Confirmation\"\n          name=\"password_confirmation\"\n          placeholder=\"Password Confirmation\"\n          onChange={onChangeHandler}\n        />\n        <Form.Input\n          label=\"email\"\n          name=\"email\"\n          placeholder=\"email\"\n          onChange={onChangeHandler}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </MainContainer>\n  );\n};\nconst mapStateToProps = () => {\n  const getParams = makeSelectParams();\n  const mapState = state => {\n    return {\n      params: getParams(state)\n    };\n  };\n  return mapState;\n}; //?\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     dispatchToHandRange: (data) => dispatch(setHandRange(data))\n//   };\n// };\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(UserRegister);\n","import React, { useState, useEffect, memo, Fragment } from \"react\";\nimport { Select, Button, Form, Checkbox } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport MainContainer from \"../../../components/MainContainer\";\n// import UseRequest1API from \"../../HOC/API/useRequest1\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport reducer from \"../reducer.js\";\nimport saga from \"../saga.js\";\nimport { initRegisterUser, userSignin } from \"../actions.js\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Navbar from \"../../../components/NavBar\";\n\nimport { useInjectReducer } from \"../../../HOC/useInjectReducer.js\";\nimport { useInjectSaga } from \"../../../HOC/injectSaga.js\";\nimport { makeSelectUser } from \"../selectors\";\n\nconst key = \"user\";\n\nexport const UserLogin = ({ user }) => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n  const dispatch = useDispatch();\n  const [registerForm, updateRegisterForm] = useState({\n    name: \"\",\n    password: \"\"\n  });\n  const onChangeHandler = (e, { name, value }) => {\n    const newFormValues = { ...registerForm };\n    newFormValues[name] = value;\n    updateRegisterForm(newFormValues);\n  };\n\n  const onSubmitHandler = (e, data) => {\n    dispatch(userSignin(registerForm));\n  };\n  console.log(user);\n  return (\n    <MainContainer>\n      <Navbar username={user.name} />\n      {user.name == false ? (\n        <Fragment>\n          <h2>User Login</h2>\n          <Form onSubmit={onSubmitHandler}>\n            <Form.Input\n              label=\"Username\"\n              name=\"name\"\n              placeholder=\"Name\"\n              onChange={onChangeHandler}\n            />\n            <Form.Input\n              label=\"Password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={onChangeHandler}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Fragment>\n      ) : (\n        <div>You are currently logged in.</div>\n      )}\n    </MainContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  user: makeSelectUser()\n});\n\nconst withConnect = connect(mapStateToProps, null);\n\nexport default compose(withConnect, memo)(UserLogin);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Provider } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport throttle from \"lodash/throttle\";\nimport { saveState } from \"./localStorage\";\nimport configureStore from \"./configureStore\";\nimport { initialState } from \"./containers/MainPage/reducer.js\";\nimport history from \"./utils/history\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport UserRegister from \"./containers/Auth/Register/UserRegister.js\";\nimport Login from \"./containers/Auth/Login/UserLogin.js\";\n// import { Auth0Provider } from \"@auth0/auth0-react\";\nimport config from \"./auth_config\";\n\n//const store = createStore(combineReducers({rootReducer, handRangesAvailable}), applyMiddleware(thunk));\n// Create redux store with history\n//const initialState = {};\nconst store = configureStore(initialState, history);\n\nstore.subscribe(\n  throttle(() => {\n    const { global, user } = store.getState();\n    saveState({ global, user });\n  }, 1000)\n);\n\nconst siteUrl = `${process.env.REACT_APP_PRODUCTION_API_URL}`;\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(appState && siteUrl ? siteUrl : window.location.pathname);\n};\n\nReactDOM.render(\n  // <Auth0Provider\n  //   domain={config.domain}\n  //   client_id={config.clientId}\n  //   redirect_uri={siteUrl}\n  //   onRedirectCallback={onRedirectCallback}\n  // >\n  <Provider store={store}>\n    <Router history={history}>\n      <ThemeProvider theme={{ main: \"mediumseagreen\" }}>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/register\" component={UserRegister} />\n        <Route exact path=\"/login\" component={Login} />\n      </ThemeProvider>\n    </Router>\n  </Provider>,\n  // </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport createReducer from \"./reducers\";\nimport { loadState } from \"./localStorage\";\nimport initialStates from \"./containers/MainPage/reducer.js\";\n\nexport default function configureStore(initialState = initialStates, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== \"production\" && typeof window === \"object\") {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    // /* eslint-enable */\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const persistedState = loadState();\n\n  const store = createStore(\n    createReducer(),\n    // initialState,\n    persistedState,\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"],"sourceRoot":""}